{"ast":null,"code":"var _jsxFileName = \"/Users/taderiscon/Documents/GitHub/fornevercollective.github.io/image-indexer-app/src/components/ImageFeed.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Thumbnail from './Thumbnail';\nimport SortBar from './SortBar';\nimport DrilldownModal from './DrilldownModal';\nimport { fetchImages } from '../utils/imageSearchApis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageFeed = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [sortCriteria, setSortCriteria] = useState('default');\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    const loadImages = async () => {\n      const newImages = await fetchImages(page);\n      setImages(prevImages => [...prevImages, ...newImages]);\n      setLoading(false);\n    };\n    loadImages();\n  }, [page]);\n  const handleImageClick = image => {\n    setSelectedImage(image);\n  };\n  const handleCloseModal = () => {\n    setSelectedImage(null);\n  };\n  const handleSortChange = criteria => {\n    setSortCriteria(criteria);\n    // Implement sorting logic based on criteria\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-feed\",\n    children: [/*#__PURE__*/_jsxDEV(SortBar, {\n      onSortChange: handleSortChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thumbnails\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading images...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this) : images.map(image => /*#__PURE__*/_jsxDEV(Thumbnail, {\n        image: image,\n        onClick: () => handleImageClick(image)\n      }, image.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(DrilldownModal, {\n      image: selectedImage,\n      onClose: handleCloseModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPage(prevPage => prevPage + 1),\n      children: \"Load More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageFeed, \"C5O0Qb76iS08EJ8LCj7XIR4/icM=\");\n_c = ImageFeed;\nexport default ImageFeed;\nvar _c;\n$RefreshReg$(_c, \"ImageFeed\");","map":{"version":3,"names":["React","useEffect","useState","Thumbnail","SortBar","DrilldownModal","fetchImages","jsxDEV","_jsxDEV","ImageFeed","_s","images","setImages","loading","setLoading","selectedImage","setSelectedImage","sortCriteria","setSortCriteria","page","setPage","loadImages","newImages","prevImages","handleImageClick","image","handleCloseModal","handleSortChange","criteria","className","children","onSortChange","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","id","onClose","prevPage","_c","$RefreshReg$"],"sources":["/Users/taderiscon/Documents/GitHub/fornevercollective.github.io/image-indexer-app/src/components/ImageFeed.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Thumbnail from './Thumbnail';\nimport SortBar from './SortBar';\nimport DrilldownModal from './DrilldownModal';\nimport { fetchImages } from '../utils/imageSearchApis';\n\nconst ImageFeed = () => {\n    const [images, setImages] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [sortCriteria, setSortCriteria] = useState('default');\n    const [page, setPage] = useState(1);\n\n    useEffect(() => {\n        const loadImages = async () => {\n            const newImages = await fetchImages(page);\n            setImages(prevImages => [...prevImages, ...newImages]);\n            setLoading(false);\n        };\n\n        loadImages();\n    }, [page]);\n\n    const handleImageClick = (image) => {\n        setSelectedImage(image);\n    };\n\n    const handleCloseModal = () => {\n        setSelectedImage(null);\n    };\n\n    const handleSortChange = (criteria) => {\n        setSortCriteria(criteria);\n        // Implement sorting logic based on criteria\n    };\n\n    return (\n        <div className=\"image-feed\">\n            <SortBar onSortChange={handleSortChange} />\n            <div className=\"thumbnails\">\n                {loading ? (\n                    <p>Loading images...</p>\n                ) : (\n                    images.map((image) => (\n                        <Thumbnail\n                            key={image.id}\n                            image={image}\n                            onClick={() => handleImageClick(image)}\n                        />\n                    ))\n                )}\n            </div>\n            {selectedImage && (\n                <DrilldownModal\n                    image={selectedImage}\n                    onClose={handleCloseModal}\n                />\n            )}\n            <button onClick={() => setPage(prevPage => prevPage + 1)}>\n                Load More\n            </button>\n        </div>\n    );\n};\n\nexport default ImageFeed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}