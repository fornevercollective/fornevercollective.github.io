{"ast":null,"code":"var _jsxFileName = \"/Users/taderiscon/Documents/GitHub/fornevercollective.github.io/image-indexer-app/src/components/DrilldownModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrilldownModal = ({\n  isOpen,\n  onClose,\n  images,\n  currentLayer\n}) => {\n  _s();\n  const [currentImages, setCurrentImages] = useState(images.slice(0, 100)); // Preload max 100 images\n\n  const handleImageClick = image => {\n    // Logic to handle image click and drill down\n    if (currentLayer < 5) {\n      // Fetch and set new images based on the clicked image\n      // This is a placeholder for the actual image fetching logic\n      const newImages = fetchImagesForDrilldown(image);\n      setCurrentImages(newImages);\n    }\n  };\n  const fetchImagesForDrilldown = image => {\n    // Placeholder function to simulate fetching images based on the clicked image\n    return []; // Return new images based on the clicked image\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `modal ${isOpen ? 'is-active' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-background\",\n      onClick: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-grid\",\n        children: currentImages.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: `Drilldown image ${index}`,\n          onClick: () => handleImageClick(image)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"modal-close is-large\",\n      \"aria-label\": \"close\",\n      onClick: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(DrilldownModal, \"alNp91mcm73sftMB/TVfdRxUf30=\");\n_c = DrilldownModal;\nexport default DrilldownModal;\nvar _c;\n$RefreshReg$(_c, \"DrilldownModal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DrilldownModal","isOpen","onClose","images","currentLayer","_s","currentImages","setCurrentImages","slice","handleImageClick","image","newImages","fetchImagesForDrilldown","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","index","src","alt","_c","$RefreshReg$"],"sources":["/Users/taderiscon/Documents/GitHub/fornevercollective.github.io/image-indexer-app/src/components/DrilldownModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\ninterface DrilldownModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    images: string[]; // Array of image URLs\n    currentLayer: number; // Current depth of drilldown\n}\n\nconst DrilldownModal: React.FC<DrilldownModalProps> = ({ isOpen, onClose, images, currentLayer }) => {\n    const [currentImages, setCurrentImages] = useState(images.slice(0, 100)); // Preload max 100 images\n\n    const handleImageClick = (image: string) => {\n        // Logic to handle image click and drill down\n        if (currentLayer < 5) {\n            // Fetch and set new images based on the clicked image\n            // This is a placeholder for the actual image fetching logic\n            const newImages = fetchImagesForDrilldown(image);\n            setCurrentImages(newImages);\n        }\n    };\n\n    const fetchImagesForDrilldown = (image: string): string[] => {\n        // Placeholder function to simulate fetching images based on the clicked image\n        return []; // Return new images based on the clicked image\n    };\n\n    return (\n        <div className={`modal ${isOpen ? 'is-active' : ''}`}>\n            <div className=\"modal-background\" onClick={onClose}></div>\n            <div className=\"modal-content\">\n                <div className=\"image-grid\">\n                    {currentImages.map((image, index) => (\n                        <img\n                            key={index}\n                            src={image}\n                            alt={`Drilldown image ${index}`}\n                            onClick={() => handleImageClick(image)}\n                        />\n                    ))}\n                </div>\n            </div>\n            <button className=\"modal-close is-large\" aria-label=\"close\" onClick={onClose}></button>\n        </div>\n    );\n};\n\nexport default DrilldownModal;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASxC,MAAMC,cAA6C,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC,MAAM;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACjG,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAACM,MAAM,CAACK,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;;EAE1E,MAAMC,gBAAgB,GAAIC,KAAa,IAAK;IACxC;IACA,IAAIN,YAAY,GAAG,CAAC,EAAE;MAClB;MACA;MACA,MAAMO,SAAS,GAAGC,uBAAuB,CAACF,KAAK,CAAC;MAChDH,gBAAgB,CAACI,SAAS,CAAC;IAC/B;EACJ,CAAC;EAED,MAAMC,uBAAuB,GAAIF,KAAa,IAAe;IACzD;IACA,OAAO,EAAE,CAAC,CAAC;EACf,CAAC;EAED,oBACIX,OAAA;IAAKc,SAAS,EAAE,SAASZ,MAAM,GAAG,WAAW,GAAG,EAAE,EAAG;IAAAa,QAAA,gBACjDf,OAAA;MAAKc,SAAS,EAAC,kBAAkB;MAACE,OAAO,EAAEb;IAAQ;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC1DpB,OAAA;MAAKc,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC1Bf,OAAA;QAAKc,SAAS,EAAC,YAAY;QAAAC,QAAA,EACtBR,aAAa,CAACc,GAAG,CAAC,CAACV,KAAK,EAAEW,KAAK,kBAC5BtB,OAAA;UAEIuB,GAAG,EAAEZ,KAAM;UACXa,GAAG,EAAE,mBAAmBF,KAAK,EAAG;UAChCN,OAAO,EAAEA,CAAA,KAAMN,gBAAgB,CAACC,KAAK;QAAE,GAHlCW,KAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIb,CACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACNpB,OAAA;MAAQc,SAAS,EAAC,sBAAsB;MAAC,cAAW,OAAO;MAACE,OAAO,EAAEb;IAAQ;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtF,CAAC;AAEd,CAAC;AAACd,EAAA,CApCIL,cAA6C;AAAAwB,EAAA,GAA7CxB,cAA6C;AAsCnD,eAAeA,cAAc;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}