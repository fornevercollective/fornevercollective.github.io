namespace Skew {
  enum PassKind {
    MERGING
  }

  class MergingPass : Pass {
    over kind PassKind {
      return .MERGING
    }

    over run(context PassContext) {
      Merging.mergeObject(context.log, null, context.global, context.global)
    }
  }
}

namespace Skew.Merging {
  def mergeObject(log Log, parent ObjectSymbol, target ObjectSymbol, symbol ObjectSymbol) {
    target.scope = ObjectScope.new(parent?.scope, target)
    symbol.scope = target.scope
    symbol.parent = parent

    # This is a heuristic for getting the range to be from the primary definition
    if symbol.kind == target.kind && symbol.variables.count > target.variables.count {
      target.range = symbol.range
    }

    if symbol.parameters != null {
      for parameter in symbol.parameters {
        parameter.scope = parent.scope
        parameter.parent = target

        # Type parameters cannot merge with any members
        var other = target.members.get(parameter.name, null)
        if other != null {
          log.semanticErrorDuplicateSymbol(parameter.range, parameter.name, other.range)
          continue
        }

        target.members[parameter.name] = parameter
      }
    }

    mergeObjects(log, target, symbol.objects)
    mergeFunctions(log, target, symbol.functions, .NORMAL)
    mergeVariables(log, target, symbol.variables)
  }

  def mergeObjects(log Log, parent ObjectSymbol, children List<ObjectSymbol>) {
    var members = parent.members
    children.removeIf(child => {
      var other = members.get(child.name, null)

      # Simple case: no merging
      if other == null {
        members[child.name] = child
        mergeObject(log, parent, child, child)
        return false
      }

      # Can only merge with another of the same kind or with a namespace
      if other.kind == .OBJECT_NAMESPACE {
        var swap = other.range
        other.range = child.range
        child.range = swap
        other.kind = child.kind
      } else if child.kind == .OBJECT_NAMESPACE {
        child.kind = other.kind
      } else if child.kind != other.kind {
        log.semanticErrorDuplicateSymbol(child.range, child.name, other.range)
        return true
      }

      # Classes can only have one base type
      var object = other.asObjectSymbol
      if child.extends != null {
        if object.extends != null {
          log.semanticErrorDuplicateBaseType(child.extends.range, child.name, object.extends.range)
          return true
        }
        object.extends = child.extends
      }

      # Merge base interfaces
      if child.implements != null {
        if object.implements != null {
          object.implements.append(child.implements)
        } else {
          object.implements = child.implements
        }
      }

      # Cannot merge two objects that both have type parameters
      if child.parameters != null && object.parameters != null {
        log.semanticErrorDuplicateTypeParameters(rangeOfParameters(child.parameters), child.name, rangeOfParameters(object.parameters))
        return true
      }

      # Merge "child" into "other"
      mergeObject(log, parent, object, child)
      object.mergeInformationFrom(child)
      object.objects.append(child.objects)
      object.functions.append(child.functions)
      object.variables.append(child.variables)
      if child.parameters != null {
        object.parameters = child.parameters
      }
      if child.guards != null {
        object.guards ?= []
        for guard in child.guards {
          for g = guard; g != null; g = g.elseGuard {
            g.parent = object
            g.contents.parent = object
          }
          object.guards.append(guard)
        }
      }
      return true
    })
  }

  enum MergeBehavior {
    NORMAL
    INTO_DERIVED_CLASS
  }

  def mergeFunctions(log Log, parent ObjectSymbol, children List<FunctionSymbol>, behavior MergeBehavior) {
    var members = parent.members

    for child in children {
      var other = members.get(child.name, null)

      # Create a scope for this function's type parameters
      if behavior == .NORMAL {
        var scope = FunctionScope.new(parent.scope, child)
        child.scope = scope
        child.parent = parent

        if child.parameters != null {
          for parameter in child.parameters {
            parameter.scope = scope
            parameter.parent = child

            # Type parameters cannot merge with other parameters on this function
            var previous = scope.parameters.get(parameter.name, null)
            if previous != null {
              log.semanticErrorDuplicateSymbol(parameter.range, parameter.name, previous.range)
              continue
            }

            scope.parameters[parameter.name] = parameter
          }
        }
      }

      # Simple case: no merging
      if other == null {
        members[child.name] = child
        continue
      }

      var childKind = overloadedKind(child.kind)
      var otherKind = overloadedKind(other.kind)

      # Merge with another symbol of the same overloaded group type
      if childKind != otherKind || !childKind.isOverloadedFunction {
        if behavior == .NORMAL {
          log.semanticErrorDuplicateSymbol(child.range, child.name, other.range)
        } else {
          log.semanticErrorBadOverride(other.range, other.name, parent.baseType, child.range)
        }
        continue
      }

      # Merge with a group of overloaded functions
      if other.kind.isOverloadedFunction {
        other.asOverloadedFunctionSymbol.symbols.append(child)
        if behavior == .NORMAL {
          child.overloaded = other.asOverloadedFunctionSymbol
        }
        continue
      }

      # Create an overload group
      var overloaded = OverloadedFunctionSymbol.new(childKind, child.name, [other.asFunctionSymbol, child])
      members[child.name] = overloaded
      other.asFunctionSymbol.overloaded = overloaded
      if behavior == .NORMAL {
        child.overloaded = overloaded
      }
      overloaded.scope = parent.scope
      overloaded.parent = parent
    }
  }

  def overloadedKind(kind SymbolKind) SymbolKind {
    return
      kind == .FUNCTION_CONSTRUCTOR || kind == .FUNCTION_GLOBAL ? .OVERLOADED_GLOBAL :
      kind == .FUNCTION_ANNOTATION ? .OVERLOADED_ANNOTATION :
      kind == .FUNCTION_INSTANCE ? .OVERLOADED_INSTANCE :
      kind
  }

  def mergeVariables(log Log, parent ObjectSymbol, children List<VariableSymbol>) {
    var members = parent.members

    for child in children {
      var other = members.get(child.name, null)
      child.scope = VariableScope.new(parent.scope, child)
      child.parent = parent

      # Variables never merge
      if other != null {
        log.semanticErrorDuplicateSymbol(child.range, child.name, other.range)
        continue
      }

      members[child.name] = child
    }
  }

  def rangeOfParameters(parameters List<ParameterSymbol>) Range {
    return Range.span(parameters.first.range, parameters.last.range)
  }
}
