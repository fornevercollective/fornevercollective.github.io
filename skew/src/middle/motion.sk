namespace Skew {
  enum PassKind {
    MOTION
  }

  class MotionPass : Pass {
    over kind PassKind {
      return .MOTION
    }

    over run(context PassContext) {
      var motionContext = Motion.Context.new
      Motion.symbolMotion(context.global, context.options, motionContext)
      motionContext.finish
    }
  }
}

namespace Skew.Motion {
  def symbolMotion(symbol ObjectSymbol, options CompilerOptions, context Context) {
    # Move non-imported objects off imported objects
    symbol.objects.removeIf(object => {
      symbolMotion(object, options, context)
      if symbol.isImported && !object.isImported || !options.target.supportsNestedTypes && !symbol.kind.isNamespaceOrGlobal {
        context.moveSymbolIntoNewNamespace(object)
        return true
      }
      return false
    })

    # Move global functions with implementations off of imported objects and interfaces
    symbol.functions.removeIf(function => {
      if function.kind == .FUNCTION_GLOBAL && (symbol.isImported && !function.isImported || symbol.kind == .OBJECT_INTERFACE) {
        context.moveSymbolIntoNewNamespace(function)
        return true
      }
      return false
    })

    # Move stuff off of enums and flags
    if symbol.kind.isEnumOrFlags {
      symbol.objects.each(object => context.moveSymbolIntoNewNamespace(object))
      symbol.functions.each(function => context.moveSymbolIntoNewNamespace(function))
      symbol.variables.removeIf(variable => {
        if variable.kind != .VARIABLE_ENUM_OR_FLAGS {
          context.moveSymbolIntoNewNamespace(variable)
          return true
        }
        return false
      })
      symbol.objects = []
      symbol.functions = []
    }

    # Move variables off of interfaces
    else if symbol.kind == .OBJECT_INTERFACE {
      symbol.variables.each(variable => context.moveSymbolIntoNewNamespace(variable))
      symbol.variables = []
    }
  }

  class Context {
    var _namespaces = IntMap<ObjectSymbol>.new

    # Avoid mutation during iteration
    def finish {
      var values = _namespaces.values
      values.sort(Symbol.SORT_OBJECTS_BY_ID) # Sort so the order is deterministic
      for object in values {
        object.parent.asObjectSymbol.objects.append(object)
      }
    }

    def moveSymbolIntoNewNamespace(symbol Symbol) {
      var parent = symbol.parent
      var namespace = _namespaces.get(parent.id, null)
      var object = namespace?.asObjectSymbol

      # Create a parallel namespace next to the parent
      if namespace == null {
        var common = parent.parent.asObjectSymbol
        var name = "in_" + parent.name
        var candidate = common.members.get(name, null)

        if candidate != null && candidate.kind == .OBJECT_NAMESPACE {
          object = candidate.asObjectSymbol
        }

        else {
          object = ObjectSymbol.new(.OBJECT_NAMESPACE, common.scope.generateName(name))
          object.range = parent.range
          object.resolvedType = Type.new(.SYMBOL, object)
          object.state = .INITIALIZED
          object.scope = ObjectScope.new(common.scope, object)
          object.parent = common
          common.members[name] = object
          _namespaces[parent.id] = object
        }
      }

      # Move this function into that parallel namespace
      symbol.parent = object

      if symbol.kind.isObject {
        object.objects.append(symbol.asObjectSymbol)
      }

      else if symbol.kind.isFunction {
        object.functions.append(symbol.asFunctionSymbol)

        # Inflate functions with type parameters from the parent (TODO: Need to inflate call sites too)
        if parent.asObjectSymbol.parameters != null {
          var function = symbol.asFunctionSymbol
          function.parameters ?= []
          function.parameters.prepend(parent.asObjectSymbol.parameters)
        }
      }

      else if symbol.kind.isVariable {
        object.variables.append(symbol.asVariableSymbol)
      }
    }
  }
}
