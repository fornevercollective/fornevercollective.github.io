namespace Skew {
  const NATIVE_LIBRARY_CS = "
@using(\"System.Diagnostics\")
def assert(truth bool) {
  dynamic.Debug.Assert(truth)
}

@using(\"System\")
var __random dynamic.Random = null

@using(\"System\")
@import
namespace Math {
  @rename(\"Abs\") if TARGET == .CSHARP
  def abs(x double) double
  @rename(\"Abs\") if TARGET == .CSHARP
  def abs(x int) int

  @rename(\"Acos\") if TARGET == .CSHARP
  def acos(x double) double
  @rename(\"Asin\") if TARGET == .CSHARP
  def asin(x double) double
  @rename(\"Atan\") if TARGET == .CSHARP
  def atan(x double) double
  @rename(\"Atan2\") if TARGET == .CSHARP
  def atan2(x double, y double) double

  @rename(\"Sin\") if TARGET == .CSHARP
  def sin(x double) double
  @rename(\"Cos\") if TARGET == .CSHARP
  def cos(x double) double
  @rename(\"Tan\") if TARGET == .CSHARP
  def tan(x double) double

  @rename(\"Floor\") if TARGET == .CSHARP
  def floor(x double) double
  @rename(\"Ceiling\") if TARGET == .CSHARP
  def ceil(x double) double
  @rename(\"Round\") if TARGET == .CSHARP
  def round(x double) double

  @rename(\"Exp\") if TARGET == .CSHARP
  def exp(x double) double
  @rename(\"Log\") if TARGET == .CSHARP
  def log(x double) double
  @rename(\"Pow\") if TARGET == .CSHARP
  def pow(x double, y double) double
  @rename(\"Sqrt\") if TARGET == .CSHARP
  def sqrt(x double) double

  @rename(\"Max\") if TARGET == .CSHARP
  def max(x double, y double) double
  @rename(\"Max\") if TARGET == .CSHARP
  def max(x int, y int) int

  @rename(\"Min\") if TARGET == .CSHARP
  def min(x double, y double) double
  @rename(\"Min\") if TARGET == .CSHARP
  def min(x int, y int) int

  def random double {
    __random ?= dynamic.Random.new()
    return __random.NextDouble()
  }
}

class double {
  def isFinite bool {
    return !isNaN && !dynamic.double.IsInfinity(self)
  }

  def isNaN bool {
    return dynamic.double.IsNaN(self)
  }
}

@using(\"System.Text\")
@import
class StringBuilder {
  @rename(\"Append\")
  def append(x string)

  @rename(\"ToString\")
  def toString string
}

class bool {
  @rename(\"ToString\")
  def toString string {
    return self ? \"true\" : \"false\"
  }
}

class int {
  @rename(\"ToString\")
  def toString string

  def >>>(x int) int {
    return dynamic.unchecked(self as dynamic.uint >> x) as int
  }
}

class double {
  @rename(\"ToString\")
  def toString string
}

class string {
  @rename(\"CompareTo\")
  def <=>(x string) int

  @rename(\"StartsWith\")
  def startsWith(x string) bool

  @rename(\"EndsWith\")
  def endsWith(x string) bool

  @rename(\"Contains\")
  def in(x string) bool

  @rename(\"IndexOf\")
  def indexOf(x string) int

  @rename(\"LastIndexOf\")
  def lastIndexOf(x string) int

  @rename(\"Replace\")
  def replaceAll(before string, after string) string

  @rename(\"Substring\") {
    def slice(start int) string
    def slice(start int, end int) string
  }

  @rename(\"ToLower\")
  def toLowerCase string

  @rename(\"ToUpper\")
  def toUpperCase string

  def count int {
    return (self as dynamic).Length
  }

  def get(index int) string {
    return fromCodeUnit(self[index])
  }

  def repeat(times int) string {
    var result = \"\"
    for i in 0..times {
      result += self
    }
    return result
  }

  @using(\"System.Linq\")
  @using(\"System\")
  def split(separator string) List<string> {
    var separators = [separator]
    return dynamic.Enumerable.ToList((self as dynamic).Split(dynamic.Enumerable.ToArray(separators as dynamic), dynamic.StringSplitOptions.None))
  }

  def join(parts List<string>) string {
    return dynamic.string.Join(self, parts)
  }

  def slice(start int, end int) string {
    return (self as dynamic).Substring(start, end - start)
  }

  def codeUnits List<int> {
    var result List<int> = []
    for i in 0..count {
      result.append(self[i])
    }
    return result
  }
}

namespace string {
  def fromCodeUnit(codeUnit int) string {
    return dynamic.string.new(codeUnit as dynamic.char, 1)
  }

  def fromCodeUnits(codeUnits List<int>) string {
    var builder = StringBuilder.new
    for codeUnit in codeUnits {
      builder.append(codeUnit as dynamic.char)
    }
    return builder.toString
  }
}

@using(\"System.Collections.Generic\")
class List {
  @rename(\"Contains\")
  def in(x T) bool

  @rename(\"Add\")
  def append(value T)

  @rename(\"AddRange\")
  def append(value List<T>)

  def sort(x fn(T, T) int) {
    # C# doesn't allow an anonymous function to be passed directly
    (self as dynamic).Sort((a T, b T) => x(a, b))
  }

  @rename(\"Reverse\")
  def reverse

  @rename(\"RemoveAll\")
  def removeIf(x fn(T) bool)

  @rename(\"RemoveAt\")
  def removeAt(x int)

  @rename(\"Remove\")
  def removeOne(x T)

  @rename(\"TrueForAll\")
  def all(x fn(T) bool) bool

  @rename(\"ForEach\")
  def each(x fn(T))

  @rename(\"FindAll\")
  def filter(x fn(T) bool) List<T>

  @rename(\"ConvertAll\")
  def map<R>(x fn(T) R) List<R>

  @rename(\"IndexOf\")
  def indexOf(x T) int

  @rename(\"LastIndexOf\")
  def lastIndexOf(x T) int

  @rename(\"Insert\")
  def insert(x int, value T)

  @rename(\"InsertRange\")
  def insert(x int, value List<T>)

  def appendOne(x T) {
    if !(x in self) {
      append(x)
    }
  }

  def removeRange(start int, end int) {
    (self as dynamic).RemoveRange(start, end - start)
  }

  @using(\"System.Linq\") {
    @rename(\"SequenceEqual\")
    def equals(x List<T>) bool

    @rename(\"First\")
    def first T

    @rename(\"Last\")
    def last T
  }

  def any(callback fn(T) bool) bool {
    return !all(x => !callback(x))
  }

  def isEmpty bool {
    return count == 0
  }

  def count int {
    return (self as dynamic).Count
  }

  def prepend(value T) {
    insert(0, value)
  }

  def prepend(values List<T>) {
    var count = values.count
    for i in 0..count {
      prepend(values[count - i - 1])
    }
  }

  def removeFirst {
    removeAt(0)
  }

  def removeLast {
    removeAt(count - 1)
  }

  def takeFirst T {
    var value = first
    removeFirst
    return value
  }

  def takeLast T {
    var value = last
    removeLast
    return value
  }

  def takeAt(x int) T {
    var value = self[x]
    removeAt(x)
    return value
  }

  def takeRange(start int, end int) List<T> {
    var value = slice(start, end)
    removeRange(start, end)
    return value
  }

  def slice(start int) List<T> {
    return slice(start, count)
  }

  def slice(start int, end int) List<T> {
    return (self as dynamic).GetRange(start, end - start)
  }

  def clone List<T> {
    var clone = new
    clone.append(self)
    return clone
  }
}

@using(\"System.Collections.Generic\")
@rename(\"Dictionary\")
class StringMap {
  def count int {
    return (self as dynamic).Count
  }

  @rename(\"ContainsKey\")
  def in(key string) bool

  @rename(\"Remove\")
  def remove(key string)

  def isEmpty bool {
    return count == 0
  }

  def {...}(key string, value T) StringMap<T> {
    (self as dynamic).Add(key, value)
    return self
  }

  def get(key string, value T) T {
    return key in self ? self[key] : value
  }

  def keys List<string> {
    return dynamic.System.Linq.Enumerable.ToList((self as dynamic).Keys)
  }

  def values List<T> {
    return dynamic.System.Linq.Enumerable.ToList((self as dynamic).Values)
  }

  def clone StringMap<T> {
    var clone = new
    for key in keys {
      clone[key] = self[key]
    }
    return clone
  }

  def each(x fn(string, T)) {
    for pair in self as dynamic {
      x(pair.Key, pair.Value)
    }
  }
}

@using(\"System.Collections.Generic\")
@rename(\"Dictionary\")
class IntMap {
  def count int {
    return (self as dynamic).Count
  }

  @rename(\"ContainsKey\")
  def in(key int) bool

  @rename(\"Remove\")
  def remove(key int)

  def isEmpty bool {
    return count == 0
  }

  def {...}(key int, value T) IntMap<T> {
    (self as dynamic).Add(key, value)
    return self
  }

  def get(key int, value T) T {
    return key in self ? self[key] : value
  }

  def keys List<int> {
    return dynamic.System.Linq.Enumerable.ToList((self as dynamic).Keys)
  }

  def values List<T> {
    return dynamic.System.Linq.Enumerable.ToList((self as dynamic).Values)
  }

  def clone IntMap<T> {
    var clone = new
    for key in keys {
      clone[key] = self[key]
    }
    return clone
  }

  def each(x fn(int, T)) {
    for pair in self as dynamic {
      x(pair.Key, pair.Value)
    }
  }
}
"
}
