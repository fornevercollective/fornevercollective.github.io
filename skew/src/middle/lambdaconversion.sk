namespace Skew {
  enum PassKind {
    LAMBDA_CONVERSION
  }

  class LambdaConversionPass : Pass {
    over kind PassKind {
      return .LAMBDA_CONVERSION
    }

    over run(context PassContext) {
      Skew.LambdaConversion.Converter.new(context.global, context.cache).run
    }
  }
}

namespace Skew.LambdaConversion {
  enum CaptureKind {
    FUNCTION
    LAMBDA
    LOOP
  }

  class Definition {
    const symbol VariableSymbol
    const node Node
    const scope Scope
    var isCaptured = false

    # If this symbol is captured, this contains the member variable on the
    # environment object where this symbol's storage is moved to
    var member VariableSymbol = null
  }

  class Use {
    const definition Definition
    const node Node
  }

  class Copy {
    const scope Scope

    # This contains the member variable on the environment containing this
    # copy where a copy of the corresponding scope is stored
    var member VariableSymbol = null
  }

  class Scope {
    const id = ++_nextID
    const kind CaptureKind
    const node Node
    const enclosingFunction FunctionSymbol
    var parent Scope
    var hasCapturedDefinitions = false
    var hasCapturingUses = false
    var environmentObject ObjectSymbol = null
    var environmentVariable VariableSymbol = null
    var environmentConstructor FunctionSymbol = null
    var environmentConstructorCall Node = null
    const definitions List<Definition> = []
    const uses List<Use> = []
    const copies List<Copy> = []
    const definitionLookup IntMap<Definition> = {}
    const copyLookup IntMap<Copy> = {}

    def recordDefinition(symbol VariableSymbol, node Node) {
      assert(!(symbol.id in definitionLookup))
      var definition = Definition.new(symbol, node, self)
      definitions.append(definition)
      definitionLookup[symbol.id] = definition
    }

    def recordUse(symbol VariableSymbol, node Node) {
      var isCaptured = false

      # Walk up the scope chain
      for scope = self; scope != null; scope = scope.parent {
        var definition = scope.definitionLookup.get(symbol.id, null)

        # Stop once the definition is found
        if definition != null {
          uses.append(Use.new(definition, node))
          if isCaptured {
            definition.isCaptured = true
            scope.hasCapturedDefinitions = true
            hasCapturingUses = true
          }
          break
        }

        # Variables are captured if a lambda is in the scope chain
        if scope.kind == .LAMBDA {
          isCaptured = true
        }
      }
    }

    def createReferenceToScope(scope Scope) Node {
      # Skip to the enclosing scope with an environment
      var target = self
      while target.environmentObject == null {
        assert(!target.hasCapturedDefinitions && target.kind != .LAMBDA)
        target = target.parent
      }

      # Reference this scope
      if scope == target {
        return Node.createSymbolReference(target.environmentVariable)
      }

      # Reference a parent scope
      var copy = target.copyLookup[scope.id]
      return Node.createMemberReference(
        Node.createSymbolReference(target.environmentVariable),
        copy.member)
    }
  }

  namespace Scope {
    var _nextID = 0
  }

  class Converter {
    const _global ObjectSymbol
    const _cache TypeCache
    const _scopes List<Scope> = []
    const _stack List<Scope> = []
    const _interfaces IntMap<ObjectSymbol> = {}
    const _calls List<Node> = []
    var _skewNamespace ObjectSymbol = null
    var _enclosingFunction FunctionSymbol = null

    def run {
      _visitObject(_global)
      _convertCalls
      _convertLambdas
    }

    def _convertCalls {
      var swap = Node.createNull
      for node in _calls {
        var value = node.callValue
        var resolvedType = value.resolvedType

        if resolvedType.kind == .LAMBDA {
          var interfaceType = _interfaceTypeForLambdaType(resolvedType)
          var interfaceRun = interfaceType.symbol.asObjectSymbol.functions.first
          assert(interfaceRun.name == "run")
          value.replaceWith(swap)
          swap.replaceWith(Node.createMemberReference(value, interfaceRun))
        }
      }
    }

    def _convertLambdas {
      # Propagate required environment copies up the scope chain
      for scope in _scopes {
        if scope.hasCapturingUses {
          for use in scope.uses {
            if use.definition.isCaptured {
              var definingScope = use.definition.scope
              for s = scope; s != definingScope; s = s.parent {
                if !(definingScope.id in s.copyLookup) {
                  var copy = Copy.new(definingScope)
                  s.copies.append(copy)
                  s.copyLookup[definingScope.id] = copy
                }
              }
            }
          }
        }
      }

      for scope in _scopes {
        if scope.hasCapturedDefinitions || scope.kind == .LAMBDA {
          # Create an object to store the environment
          var object = _createObject(.OBJECT_CLASS, _generateEnvironmentName(scope), _global)
          var constructor = _createConstructor(object)
          var constructorCall = Node.createCall(Node.createMemberReference(Node.createSymbolReference(object), constructor)).withType(object.resolvedType)

          # The environment must store all captured variables
          for definition in scope.definitions {
            if definition.isCaptured {
              definition.member = _createInstanceVariable(object.scope.generateName(definition.symbol.name), definition.symbol.resolvedType, object)
            }
          }

          # Insert the constructor call declaration
          switch scope.kind {
            case .FUNCTION {
              # Store the environment instance in a variable
              var variable = _createVariable(.VARIABLE_LOCAL, scope.enclosingFunction.scope.generateName("env"), object.resolvedType)
              variable.value = constructorCall
              scope.environmentVariable = variable

              # Define the variable at the top of the function body
              var variables = Node.createVariables.appendChild(Node.createVariable(variable))
              scope.node.prependChild(variables) # TODO: Insert this after the call to "super"

              # Assign captured arguments and "self" to the environment
              # TODO: Remove the extra indirection to "self", copy it directly into environments instead
              var previous = variables
              for definition in scope.definitions {
                if definition.isCaptured && (definition.symbol.kind == .VARIABLE_ARGUMENT || definition.symbol == scope.enclosingFunction.this) {
                  var assignment = _createAssignment(variable, definition.member, definition.symbol)
                  scope.node.insertChildAfter(previous, assignment)
                  previous = assignment
                }
              }
            }

            case .LAMBDA {
              var function = scope.node.symbol.asFunctionSymbol
              function.kind = .FUNCTION_INSTANCE
              function.name = "run"
              function.this = _createVariable(.VARIABLE_LOCAL, "self", object.resolvedType)
              function.parent = object
              object.functions.append(function)
              scope.node.become(constructorCall)
              scope.environmentVariable = function.this
              constructorCall = scope.node

              # Lambdas introduce two scopes instead of one. All captured
              # definitions for that lambda have to be in the nested scope,
              # even lambda function arguments, because that nested scope
              # needs to be different for each invocation of the lambda.
              assert(!scope.hasCapturedDefinitions)

              # Implement the lambda interface with the right type parameters
              var interfaceType = _interfaceTypeForLambdaType(function.resolvedType)
              var interfaceFunction = interfaceType.symbol.asObjectSymbol.functions.first
              assert(interfaceFunction.name == "run")
              object.implements = [Node.createType(interfaceType)]
              object.interfaceTypes = [interfaceType]
              interfaceFunction.implementations ?= []
              interfaceFunction.implementations.append(function)
            }

            case .LOOP {
              # Store the environment instance in a variable
              var variable = _createVariable(.VARIABLE_LOCAL, scope.enclosingFunction.scope.generateName("env"), object.resolvedType)
              variable.value = constructorCall
              scope.environmentVariable = variable

              # Define the variable at the top of the function body
              var variables = Node.createVariables.appendChild(Node.createVariable(variable))
              var node = scope.node
              var block =
                node.kind == .FOR ? node.forBlock :
                node.kind == .FOREACH ? node.foreachBlock :
                node.kind == .WHILE ? node.whileBlock :
                null
              block.prependChild(variables)

              # Assign captured loop variables
              var previous = variables
              for definition in scope.definitions {
                if definition.isCaptured && definition.symbol.isLoopVariable {
                  var assignment = _createAssignment(variable, definition.member, definition.symbol)
                  block.insertChildAfter(previous, assignment)
                  previous = assignment
                }
              }
            }

            default {
              assert(false)
            }
          }

          # These will be referenced later
          scope.environmentObject = object
          scope.environmentConstructor = constructor
          scope.environmentConstructorCall = constructorCall
        }

        # Mutate the parent scope pointer to skip past irrelevant scopes
        # (those without environments). This means everything necessary to
        # access captured symbols can be found on the environment associated
        # with the parent scope without needing to look at grandparent scopes.
        #
        # All parent scopes that need environments should already have them
        # because scopes are iterated over using a pre-order traversal.
        while scope.parent != null && scope.parent.environmentObject == null {
          assert(!scope.parent.hasCapturedDefinitions && scope.parent.kind != .LAMBDA)
          scope.parent = scope.parent.parent
        }
      }

      # Make sure each environment has a copy of each parent environment that it or its children needs
      for scope in _scopes {
        var object = scope.environmentObject
        var constructor = scope.environmentConstructor
        var constructorCall = scope.environmentConstructorCall

        if object != null {
          for copy in scope.copies {
            var name = object.scope.generateName(copy.scope.kind == .LAMBDA ? "lambda" : "env")
            var member = _createInstanceVariable(name, copy.scope.environmentObject.resolvedType, object)
            var argument = _createVariable(.VARIABLE_ARGUMENT, name, member.resolvedType)

            copy.member = member
            constructor.arguments.append(argument)
            constructor.resolvedType.argumentTypes.append(argument.resolvedType)
            constructor.block.appendChild(_createAssignment(constructor.this, member, argument))
            constructorCall.appendChild(scope.parent.createReferenceToScope(copy.scope))
          }
        }
      }

      for scope in _scopes {
        # Replace variable definitions of captured symbols with assignments to their environment
        if scope.hasCapturedDefinitions {
          for definition in scope.definitions {
            if definition.isCaptured && definition.node != null {
              assert(definition.node.kind == .VARIABLE)
              assert(definition.node.parent.kind == .VARIABLES)
              definition.node.extractVariableFromVariables
              definition.node.parent.replaceWith(Node.createExpression(Node.createBinary(.ASSIGN,
                Node.createMemberReference(Node.createSymbolReference(scope.environmentVariable), definition.member),
                definition.symbol.value.remove).withType(definition.member.resolvedType)))
            }
          }
        }

        # Replace all references to captured variables with a member access from the appropriate environment
        for use in scope.uses {
          if use.definition.isCaptured {
            use.node.become(Node.createMemberReference(
              scope.createReferenceToScope(use.definition.scope),
              use.definition.member))
          }
        }
      }
    }

    def _visitObject(symbol ObjectSymbol) {
      for object in symbol.objects {
        _visitObject(object)
      }

      for function in symbol.functions {
        _visitFunction(function)
      }

      for variable in symbol.variables {
        _visitVariable(variable)
      }
    }

    def _visitFunction(symbol FunctionSymbol) {
      if symbol.block != null {
        _enclosingFunction = symbol
        var scope = _pushScope(.FUNCTION, symbol.block, null)

        if symbol.this != null {
          scope.recordDefinition(symbol.this, null)
        }

        for argument in symbol.arguments {
          scope.recordDefinition(argument, null)
        }

        _visit(symbol.block)
        _stack.removeLast
        _enclosingFunction = null
      }
    }

    def _visitVariable(symbol VariableSymbol) {
      if symbol.value != null {
        _visit(symbol.value)
      }
    }

    def _visit(node Node) {
      var kind = node.kind
      var symbol = node.symbol
      var oldEnclosingFunction = _enclosingFunction

      if kind == .LAMBDA {
        _enclosingFunction = symbol.asFunctionSymbol
        var lambdaScope = _pushScope(.LAMBDA, node, _stack.isEmpty ? null : _stack.last)
        var scope = _pushScope(.FUNCTION, node.lambdaBlock, lambdaScope)
        for argument in symbol.asFunctionSymbol.arguments {
          scope.recordDefinition(argument, null)
        }
      }

      else if kind == .FOREACH {
        # Visit loop header
        _visit(node.foreachValue)

        # Visit loop body
        var scope = _pushScope(.LOOP, node, _stack.last)
        scope.recordDefinition(symbol.asVariableSymbol, null)
        _visit(node.foreachBlock)
        _stack.removeLast
        return
      }

      else if kind == .FOR || kind == .WHILE {
        _pushScope(.LOOP, node, _stack.last)
      }

      else if kind == .VARIABLE {
        _stack.last.recordDefinition(symbol.asVariableSymbol, node)
      }

      else if kind == .CATCH {
        # TODO
      }

      else if kind == .CALL {
        _calls.append(node)
      }

      else if kind == .NAME && symbol != null && (symbol.kind == .VARIABLE_ARGUMENT || symbol.kind == .VARIABLE_LOCAL) {
        _stack.last.recordUse(symbol.asVariableSymbol, node)
      }

      for child = node.firstChild; child != null; child = child.nextSibling {
        _visit(child)
      }

      if kind == .LAMBDA {
        _stack.removeLast
        _stack.removeLast
        _enclosingFunction = oldEnclosingFunction
      }

      else if kind.isLoop {
        _stack.removeLast
      }
    }

    def _pushScope(kind CaptureKind, node Node, parent Scope) Scope {
      var scope = Scope.new(kind, node, _enclosingFunction, parent)
      _scopes.append(scope)
      _stack.append(scope)
      return scope
    }

    def _createObject(kind SymbolKind, name string, parent ObjectSymbol) ObjectSymbol {
      var object = ObjectSymbol.new(kind, parent.scope.generateName(name))
      object.scope = ObjectScope.new(parent.scope, object)
      object.resolvedType = Type.new(.SYMBOL, object)
      object.state = .INITIALIZED
      object.parent = parent
      parent.objects.append(object)
      return object
    }

    def _ensureSkewNamespaceExists {
      if _skewNamespace == null {
        var symbol = _global.scope.find("Skew", .NORMAL)

        # Did the user's code define the namespace?
        if symbol != null && symbol.kind.isObject {
          _skewNamespace = symbol.asObjectSymbol
        }

        # It's missing or there's a conflict, define one ourselves
        else {
          _skewNamespace = _createObject(.OBJECT_NAMESPACE, "Skew", _global)
          _skewNamespace.flags |= .IS_IMPORTED
        }
      }
    }

    def _createInterface(count int, hasReturnType bool) ObjectSymbol {
      var key = count << 1 | hasReturnType as int
      var object = _interfaces.get(key, null)

      if object == null {
        _ensureSkewNamespaceExists
        object = _createObject(.OBJECT_INTERFACE, (hasReturnType ? "Fn" : "FnVoid") + count.toString, _skewNamespace)
        object.flags |= .IS_IMPORTED
        _interfaces[key] = object

        var function = _createFunction(object, .FUNCTION_INSTANCE, "run", .ABSTRACT)
        function.flags |= .IS_IMPORTED
        function.resolvedType.argumentTypes = []

        if hasReturnType {
          var returnType = _createParameter(object, "R").resolvedType
          function.resolvedType.returnType = returnType
          function.returnType = Node.createType(returnType)
        }

        for i in 0..count {
          var parameter = _createParameter(object, "A\(i + 1)")
          function.arguments.append(_createVariable(.VARIABLE_ARGUMENT, "a\(i + 1)", parameter.resolvedType))
          function.resolvedType.argumentTypes.append(parameter.resolvedType)
        }
      }

      return object
    }

    def _interfaceTypeForLambdaType(lambdaType Type) Type {
      var interface = _createInterface(lambdaType.argumentTypes.count, lambdaType.returnType != null)
      var interfaceType = interface.resolvedType
      var substitutions List<Type> = []
      if lambdaType.returnType != null {
        substitutions.append(lambdaType.returnType)
      }
      substitutions.append(lambdaType.argumentTypes)
      if !substitutions.isEmpty {
        interfaceType = _cache.substitute(interfaceType, _cache.createEnvironment(interface.parameters, substitutions))
      }
      return interfaceType
    }
  }

  namespace Converter {
    def _generateEnvironmentName(scope Scope) string {
      var name = ""
      var root = scope
      while root.parent != null {
        root = root.parent
      }
      for symbol Symbol = root.enclosingFunction; symbol != null && symbol.kind != .OBJECT_GLOBAL; symbol = symbol.parent {
        if symbol.kind != .OBJECT_GLOBAL && !Renaming.isInvalidIdentifier(symbol.name) {
          name = withUppercaseFirstLetter(symbol.name) + name
        }
      }
      name += scope.kind == .LAMBDA ? "Lambda" : "Env"
      return name
    }

    def _createConstructor(object ObjectSymbol) FunctionSymbol {
      var function = _createFunction(object, .FUNCTION_CONSTRUCTOR, "new", .IMPLEMENTED)
      function.resolvedType.returnType = object.resolvedType
      function.returnType = Node.createType(object.resolvedType)
      return function
    }

    enum Body {
      ABSTRACT
      IMPLEMENTED
    }

    def _createFunction(object ObjectSymbol, kind SymbolKind, name string, body Body) FunctionSymbol {
      var function = FunctionSymbol.new(kind, name)
      function.scope = FunctionScope.new(object.scope, function)
      function.resolvedType = Type.new(.SYMBOL, function)
      function.resolvedType.argumentTypes = []
      function.state = .INITIALIZED
      function.parent = object

      if body == .IMPLEMENTED {
        function.block = Node.createBlock
        function.this = _createVariable(.VARIABLE_LOCAL, "self", object.resolvedType)
      }

      object.functions.append(function)
      return function
    }

    def _createInstanceVariable(name string, type Type, object ObjectSymbol) VariableSymbol {
      var variable = _createVariable(.VARIABLE_INSTANCE, name, type)
      variable.parent = object
      object.variables.append(variable)
      return variable
    }

    def _createVariable(kind SymbolKind, name string, type Type) VariableSymbol {
      var variable = VariableSymbol.new(kind, name)
      variable.initializeWithType(type)
      return variable
    }

    def _createParameter(parent ObjectSymbol, name string) ParameterSymbol {
      var parameter = ParameterSymbol.new(.PARAMETER_OBJECT, name)
      parameter.resolvedType = Type.new(.SYMBOL, parameter)
      parameter.state = .INITIALIZED
      parent.parameters ?= []
      parent.parameters.append(parameter)
      return parameter
    }

    def _createAssignment(object VariableSymbol, member VariableSymbol, variable VariableSymbol) Node {
      return Node.createExpression(Node.createBinary(.ASSIGN,
        Node.createMemberReference(Node.createSymbolReference(object), member),
        Node.createSymbolReference(variable)).withType(member.resolvedType))
    }
  }
}
