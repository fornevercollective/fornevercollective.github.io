namespace Skew {
  enum PassKind {
    FOLDING
  }

  class FoldingPass : Pass {
    over kind PassKind {
      return .FOLDING
    }

    over run(context PassContext) {
      Folding.ConstantFolder.new(context.cache, context.options, null).visitObject(context.global)
    }
  }
}

namespace Skew.Folding {
  class ConstantFolder {
    const _cache TypeCache
    const _options CompilerOptions
    const _prepareSymbol fn(Symbol)
    const _constantCache IntMap<Content> = {}

    def visitObject(symbol ObjectSymbol) {
      for object in symbol.objects {
        visitObject(object)
      }

      for function in symbol.functions {
        if function.block != null {
          foldConstants(function.block)
        }
      }

      for variable in symbol.variables {
        if variable.value != null {
          foldConstants(variable.value)
        }
      }
    }

    # Use this instead of node.become(Node.createConstant(content)) to avoid more GC
    def _flatten(node Node, content Content) {
      node.removeChildren
      node.kind = .CONSTANT
      node.content = content
      node.symbol = null
    }

    # Use this instead of node.become(Node.createBool(value)) to avoid more GC
    def _flattenBool(node Node, value bool) {
      assert(_cache.isEquivalentToBool(node.resolvedType) || node.resolvedType == .DYNAMIC)
      _flatten(node, BoolContent.new(value))
    }

    # Use this instead of node.become(Node.createInt(value)) to avoid more GC
    def _flattenInt(node Node, value int) {
      assert(_cache.isEquivalentToInt(node.resolvedType) || node.resolvedType == .DYNAMIC)
      _flatten(node, IntContent.new(value))
    }

    # Use this instead of node.become(Node.createDouble(value)) to avoid more GC
    def _flattenDouble(node Node, value double) {
      assert(_cache.isEquivalentToDouble(node.resolvedType) || node.resolvedType == .DYNAMIC)
      _flatten(node, DoubleContent.new(value))
    }

    # Use this instead of node.become(Node.createString(value)) to avoid more GC
    def _flattenString(node Node, value string) {
      assert(_cache.isEquivalentToString(node.resolvedType) || node.resolvedType == .DYNAMIC)
      _flatten(node, StringContent.new(value))
    }

    def foldConstants(node Node) {
      var kind = node.kind

      # Transform "a + (b + c)" => "(a + b) + c" before operands are folded
      if kind == .ADD && node.resolvedType == _cache.stringType && node.binaryLeft.resolvedType == _cache.stringType && node.binaryRight.resolvedType == _cache.stringType {
        _rotateStringConcatenation(node)
      }

      # Fold operands before folding this node
      for child = node.firstChild; child != null; child = child.nextSibling {
        foldConstants(child)
      }

      # Separating the case bodies into separate functions makes the JavaScript JIT go faster
      switch kind {
        case .BLOCK { _foldBlock(node) }
        case .CALL { _foldCall(node) }
        case .CAST { _foldCast(node) }
        case .DOT { _foldDot(node) }
        case .HOOK { _foldHook(node) }
        case .NAME { _foldName(node) }
        case .COMPLEMENT, .NEGATIVE, .NOT, .POSITIVE { _foldUnary(node) }
        default {
          if kind.isBinary { _foldBinary(node) }
        }
      }
    }

    def _rotateStringConcatenation(node Node) {
      var left = node.binaryLeft
      var right = node.binaryRight
      assert(node.kind == .ADD)
      assert(left.resolvedType == _cache.stringType || left.resolvedType == .DYNAMIC)
      assert(right.resolvedType == _cache.stringType || right.resolvedType == .DYNAMIC)

      # "a + (b + c)" => "(a + b) + c"
      if right.kind == .ADD {
        assert(right.binaryLeft.resolvedType == _cache.stringType || right.binaryLeft.resolvedType == .DYNAMIC)
        assert(right.binaryRight.resolvedType == _cache.stringType || right.binaryRight.resolvedType == .DYNAMIC)
        node.rotateBinaryRightToLeft
      }
    }

    def _foldStringConcatenation(node Node) {
      var left = node.binaryLeft
      var right = node.binaryRight
      assert(left.resolvedType == _cache.stringType || left.resolvedType == .DYNAMIC)
      assert(right.resolvedType == _cache.stringType || right.resolvedType == .DYNAMIC)

      if right.isString {
        # "a" + "b" => "ab"
        if left.isString {
          _flattenString(node, left.asString + right.asString)
        }

        else if left.kind == .ADD {
          var leftLeft = left.binaryLeft
          var leftRight = left.binaryRight
          assert(leftLeft.resolvedType == _cache.stringType || leftLeft.resolvedType == .DYNAMIC)
          assert(leftRight.resolvedType == _cache.stringType || leftRight.resolvedType == .DYNAMIC)

          # (a + "b") + "c" => a + "bc"
          if leftRight.isString {
            _flattenString(leftRight, leftRight.asString + right.asString)
            node.become(left.remove)
          }
        }
      }
    }

    def _foldTry(node Node) int {
      var tryBlock = node.tryBlock
      # var finallyBlock = node.finallyBlock

      # A try block without any statements cannot possibly throw
      if !tryBlock.hasChildren {
        node.remove
        return -1
      }

      return 0
    }

    def _foldIf(node Node) {
      var test = node.ifTest
      var trueBlock = node.ifTrue
      var falseBlock = node.ifFalse

      # No reason to keep an empty "else" block
      if falseBlock != null && !falseBlock.hasChildren {
        falseBlock.remove
        falseBlock = null
      }

      # Always true if statement
      if test.isTrue {
        # Inline the contents of the true block
        node.replaceWithChildrenFrom(trueBlock)
      }

      # Always false if statement
      else if test.isFalse {
        # Remove entirely
        if falseBlock == null {
          node.remove
        }

        # Inline the contents of the false block
        else {
          node.replaceWithChildrenFrom(falseBlock)
        }
      }

      # Remove if statements with empty true blocks
      else if !trueBlock.hasChildren {
        # "if (a) {} else b;" => "if (!a) b;"
        if falseBlock != null && falseBlock.hasChildren {
          test.invertBooleanCondition(_cache)
          trueBlock.remove
        }

        # "if (a) {}" => ""
        else if test.hasNoSideEffects {
          node.remove
        }

        # "if (a) {}" => "a;"
        else {
          node.become(Node.createExpression(test.remove))
        }
      }
    }

    def _foldSwitch(node Node) {
      var value = node.switchValue
      var defaultCase Node = null

      # Check for a default case
      for child = value.nextSibling; child != null; child = child.nextSibling {
        if child.hasOneChild {
          defaultCase = child
          break
        }
      }

      # Remove the default case if it's empty
      if defaultCase != null && !defaultCase.caseBlock.hasChildren {
        defaultCase.remove
        defaultCase = null
      }

      # Check for a constant value and inline the corresponding case block
      if value.kind == .CONSTANT {
        var hasNonConstant = false

        # Search all case blocks for a match
        for child = value.nextSibling, nextChild Node = null; child != null; child = nextChild {
          nextChild = child.nextSibling
          var block = child.caseBlock

          for caseValue = child.firstChild, nextCase Node = null; caseValue != block; caseValue = nextCase {
            nextCase = caseValue.nextSibling

            # If there's a non-constant value, we can't tell if it's taken or not
            if caseValue.kind != .CONSTANT {
              hasNonConstant = true
            }

            # Remove cases that definitely don't apply
            else if !value.content.equals(caseValue.content) {
              caseValue.remove
            }

            # Only inline this case if all previous values have been constants,
            # otherwise we can't be sure that none of those would have matched
            else if !hasNonConstant {
              node.replaceWithChildrenFrom(block)
              return
            }
          }

          # Remove the case entirely if all values were trimmed
          if child.hasOneChild && child != defaultCase {
            child.remove
          }
        }

        # Inline the default case if it's present and it can be proven to be taken
        if !hasNonConstant {
          if defaultCase != null {
            node.replaceWithChildrenFrom(defaultCase.caseBlock)
          } else {
            node.remove
          }
          return
        }
      }

      # If the default case is missing, all other empty cases can be removed too
      if defaultCase == null {
        for child = node.lastChild, previous Node = null; child != value; child = previous {
          previous = child.previousSibling
          if !child.caseBlock.hasChildren {
            child.remove
          }
        }
      }

      # Replace "switch (foo) {}" with "foo;"
      if node.hasOneChild {
        node.become(Node.createExpression(value.remove).withRange(node.range))
      }
    }

    def _foldVariables(node Node) {
      # Remove symbols entirely that are being inlined everywhere
      for child = node.firstChild, next Node = null; child != null; child = next {
        assert(child.kind == .VARIABLE)
        next = child.nextSibling
        var symbol = child.symbol.asVariableSymbol
        if symbol.isConst && constantForSymbol(symbol) != null {
          child.remove
        }
      }

      # Empty variable statements are not allowed
      if !node.hasChildren {
        node.remove
      }
    }

    def _foldBlock(node Node) {
      for child = node.firstChild, next Node = null; child != null; child = next {
        next = child.nextSibling
        var kind = child.kind

        # Remove everything after a jump
        if kind.isJump {
          while child.nextSibling != null {
            child.nextSibling.remove
          }
          break
        }

        # Remove constants and "while false { ... }" entirely
        if kind == .EXPRESSION && child.expressionValue.hasNoSideEffects || kind == .WHILE && child.whileTest.isFalse {
          child.remove
        }

        # Remove dead assignments
        else if kind == .EXPRESSION && child.expressionValue.kind == .ASSIGN {
          _foldAssignment(child)
        }

        else if kind == .VARIABLES {
          _foldVariables(child)
        }

        # Remove unused try statements since they can cause deoptimizations
        else if kind == .TRY {
          _foldTry(child)
        }

        # Statically evaluate if statements where possible
        else if kind == .IF {
          _foldIf(child)
        }

        # Fold switch statements
        else if kind == .SWITCH {
          _foldSwitch(child)
        }
      }
    }

    # "a = 0; b = 0; a = 1;" => "b = 0; a = 1;"
    def _foldAssignment(node Node) {
      assert(node.kind == .EXPRESSION && node.expressionValue.kind == .ASSIGN)
      var value = node.expressionValue
      var left = value.binaryLeft
      var right = value.binaryRight

      # Only do this for simple variable assignments
      var dotVariable = left.kind == .DOT && _isVariableReference(left.dotTarget) ? left.dotTarget.symbol : null
      var variable = _isVariableReference(left) || dotVariable != null ? left.symbol : null
      if variable == null {
        return
      }

      # Make sure the assigned value doesn't need the previous value. We bail
      # on expressions with side effects like function calls and on expressions
      # that reference the variable.
      if !right.hasNoSideEffects || _hasNestedReference(right, variable) {
        return
      }

      # Scan backward over previous statements
      var previous = node.previousSibling
      while previous != null {
        # Only pattern-match expressions
        if previous.kind == .EXPRESSION {
          var previousValue = previous.expressionValue

          # Remove duplicate assignments
          if previousValue.kind == .ASSIGN {
            var previousLeft = previousValue.binaryLeft
            var previousRight = previousValue.binaryRight
            var previousDotVariable = previousLeft.kind == .DOT && _isVariableReference(previousLeft.dotTarget) ? previousLeft.dotTarget.symbol : null
            var previousVariable = _isVariableReference(previousLeft) || previousDotVariable != null && previousDotVariable == dotVariable ? previousLeft.symbol : null

            # Check for assignment to the same variable and remove the assignment
            # if it's a match. Make sure to keep the assigned value around if it
            # has side effects.
            if previousVariable == variable {
              if previousRight.hasNoSideEffects {
                previous.remove
              } else {
                previousValue.replaceWith(previousRight.remove)
              }
              break
            }

            # Stop if we can't determine that this statement doesn't involve
            # this variable's value. If it does involve this variable's value,
            # then it isn't safe to remove duplicate assignments past this
            # statement.
            if !previousRight.hasNoSideEffects || _hasNestedReference(previousRight, variable) {
              break
            }
          }

          # Also stop here if we can't determine that this statement doesn't
          # involve this variable's value
          else if !previousValue.hasNoSideEffects {
            break
          }
        }

        # Also stop here if we can't determine that this statement doesn't
        # involve this variable's value
        else {
          break
        }

        previous = previous.previousSibling
      }
    }

    def _foldDot(node Node) {
      var symbol = node.symbol

      # Only replace this with a constant if the target has no side effects.
      # This catches constants declared on imported types.
      if _shouldFoldSymbol(symbol) && !node.isAssignTarget && (node.dotTarget == null || node.dotTarget.hasNoSideEffects) {
        var content = constantForSymbol(symbol.asVariableSymbol)
        if content != null {
          _flatten(node, content)
        }
      }
    }

    def _foldName(node Node) {
      var symbol = node.symbol

      # Don't fold loop variables since they aren't actually constant across loop iterations
      if _shouldFoldSymbol(symbol) && !node.isAssignTarget && !symbol.isLoopVariable {
        var content = constantForSymbol(symbol.asVariableSymbol)
        if content != null {
          _flatten(node, content)
        }
      }
    }

    def _foldCall(node Node) {
      var value = node.callValue
      var symbol = value.symbol

      # Fold instance function calls
      if value.kind == .DOT {
        var target = value.dotTarget

        # Folding of double.toString can't be done in a platform-independent
        # manner. The obvious cases are NaN and infinity, but even fractions
        # are emitted differently on different platforms. Instead of having
        # constant folding change how the code behaves, just don't fold double
        # toString calls.
        #
        # "bool.toString"
        # "int.toString"
        #
        if target != null && target.kind == .CONSTANT {
          if _isKnownCall(symbol, _cache.boolToStringSymbol) { _flattenString(node, target.asBool.toString) }
          else if _isKnownCall(symbol, _cache.intToStringSymbol) { _flattenString(node, target.asInt.toString) }
        }
      }

      # Fold global function calls
      else if value.kind == .NAME {
        # "\"abc\".count" => "3"
        if _isKnownCall(symbol, _cache.stringCountSymbol) && node.lastChild.isString {
          _flattenInt(node, Unicode.codeUnitCountForCodePoints(node.lastChild.asString.codePoints, _options.target.stringEncoding))
        }

        # "3 ** 2" => "9"
        else if _isKnownCall(symbol, _cache.intPowerSymbol) && node.lastChild.isInt && value.nextSibling.isInt {
          _flattenInt(node, value.nextSibling.asInt ** node.lastChild.asInt)
        }

        # "0.0625 ** 0.25" => "0.5"
        # "Math.pow(0.0625, 0.25)" => "0.5"
        else if (_isKnownCall(symbol, _cache.doublePowerSymbol) || _isKnownCall(symbol, _cache.mathPowSymbol)) && node.lastChild.isDouble && value.nextSibling.isDouble {
          _flattenDouble(node, value.nextSibling.asDouble ** node.lastChild.asDouble)
        }

        # "string.fromCodePoint(100)" => "\"d\""
        # "string.fromCodeUnit(100)" => "\"d\""
        else if (_isKnownCall(symbol, _cache.stringFromCodePointSymbol) || _isKnownCall(symbol, _cache.stringFromCodeUnitSymbol)) && node.lastChild.isInt {
          _flattenString(node, string.fromCodePoint(node.lastChild.asInt)) # "fromCodePoint" is a superset of "fromCodeUnit"
        }

        # "string.fromCodePoints([97, 98, 99])" => "\"abc\""
        # "string.fromCodeUnits([97, 98, 99])" => "\"abc\""
        else if (_isKnownCall(symbol, _cache.stringFromCodePointsSymbol) || _isKnownCall(symbol, _cache.stringFromCodeUnitsSymbol)) && node.lastChild.kind == .INITIALIZER_LIST {
          var codePoints List<int> = []
          for child = node.lastChild.firstChild; child != null; child = child.nextSibling {
            if !child.isInt {
              return
            }
            codePoints.append(child.asInt)
          }
          _flattenString(node, string.fromCodePoints(codePoints)) # "fromCodePoints" is a superset of "fromCodeUnits"
        }
      }
    }

    def _foldCast(node Node) {
      var type = node.castType.resolvedType
      var value = node.castValue

      if value.kind == .CONSTANT {
        var content = value.content
        var kind = content.kind

        # Cast "bool" values
        if kind == .BOOL {
          if _cache.isEquivalentToBool(type) { _flattenBool(node, value.asBool) }
          else if _cache.isEquivalentToInt(type) { _flattenInt(node, value.asBool as int) }
          else if _cache.isEquivalentToDouble(type) { _flattenDouble(node, value.asBool as double) }
        }

        # Cast "int" values
        else if kind == .INT {
          if _cache.isEquivalentToBool(type) { _flattenBool(node, value.asInt as bool) }
          else if _cache.isEquivalentToInt(type) { _flattenInt(node, value.asInt) }
          else if _cache.isEquivalentToDouble(type) { _flattenDouble(node, value.asInt) }
        }

        # Cast "double" values
        else if kind == .DOUBLE {
          if _cache.isEquivalentToBool(type) { _flattenBool(node, value.asDouble as bool) }
          else if _cache.isEquivalentToInt(type) { _flattenInt(node, value.asDouble as int) }
          else if _cache.isEquivalentToDouble(type) { _flattenDouble(node, value.asDouble) }
        }
      }
    }

    def _foldUnary(node Node) {
      var value = node.unaryValue
      var kind = node.kind

      if value.kind == .CONSTANT {
        var content = value.content
        var contentKind = content.kind

        # Fold "bool" values
        if contentKind == .BOOL {
          if kind == .NOT { _flattenBool(node, !value.asBool) }
        }

        # Fold "int" values
        else if contentKind == .INT {
          if kind == .POSITIVE { _flattenInt(node, +value.asInt) }
          else if kind == .NEGATIVE { _flattenInt(node, -value.asInt) }
          else if kind == .COMPLEMENT { _flattenInt(node, ~value.asInt) }
        }

        # Fold "float" or "double" values
        else if contentKind == .DOUBLE {
          if kind == .POSITIVE { _flattenDouble(node, +value.asDouble) }
          else if kind == .NEGATIVE { _flattenDouble(node, -value.asDouble) }
        }
      }

      # Partial evaluation ("!!x" isn't necessarily "x" if we don't know the type)
      else if kind == .NOT && value.resolvedType != .DYNAMIC {
        switch value.kind {
          case .NOT, .EQUAL, .NOT_EQUAL, .LOGICAL_OR, .LOGICAL_AND, .LESS_THAN, .GREATER_THAN, .LESS_THAN_OR_EQUAL, .GREATER_THAN_OR_EQUAL {
            value.invertBooleanCondition(_cache)
            node.become(value.remove)
          }
        }
      }
    }

    def _foldConstantIntegerAddOrSubtract(node Node, variable Node, constant Node, delta int) {
      var isAdd = node.kind == .ADD
      var needsContentUpdate = delta != 0
      var isRightConstant = constant == node.binaryRight
      var shouldNegateConstant = !isAdd && isRightConstant
      var value = constant.asInt

      # Make this an add for simplicity
      if shouldNegateConstant {
        value = -value
      }

      # Include the delta from the parent node if present
      value += delta

      # 0 + a => a
      # 0 - a => -a
      # a + 0 => a
      # a - 0 => a
      if value == 0 {
        node.become(isAdd || isRightConstant ? variable.remove : Node.createUnary(.NEGATIVE, variable.remove).withType(node.resolvedType))
        return
      }

      # Check for nested addition or subtraction
      if variable.kind == .ADD || variable.kind == .SUBTRACT {
        var left = variable.binaryLeft
        var right = variable.binaryRight
        assert(left.resolvedType == _cache.intType || left.resolvedType == .DYNAMIC)
        assert(right.resolvedType == _cache.intType || right.resolvedType == .DYNAMIC)

        # (a + 1) + 2 => a + 3
        var isLeftConstant = left.isInt
        if isLeftConstant || right.isInt {
          _foldConstantIntegerAddOrSubtract(variable, isLeftConstant ? right : left, isLeftConstant ? left : right, value)
          node.become(variable.remove)
          return
        }
      }

      # Adjust the value so it has the correct sign
      if shouldNegateConstant {
        value = -value
      }

      # The negative sign can often be removed by code transformation
      if value < 0 {
        # a + -1 => a - 1
        # a - -1 => a + 1
        if isRightConstant {
          node.kind = isAdd ? .SUBTRACT : .ADD
          value = -value
          needsContentUpdate = true
        }

        # -1 + a => a - 1
        else if isAdd {
          node.kind = .SUBTRACT
          value = -value
          variable.swapWith(constant)
          needsContentUpdate = true
        }
      }

      # Avoid extra allocations
      if needsContentUpdate {
        constant.content = IntContent.new(value)
      }

      # Also handle unary negation on "variable"
      _foldAddOrSubtract(node)
    }

    def _foldAddOrSubtract(node Node) {
      var isAdd = node.kind == .ADD
      var left = node.binaryLeft
      var right = node.binaryRight

      # -a + b => b - a
      if left.kind == .NEGATIVE && isAdd {
        left.become(left.unaryValue.remove)
        left.swapWith(right)
        node.kind = .SUBTRACT
      }

      # a + -b => a - b
      # a - -b => a + b
      else if right.kind == .NEGATIVE {
        right.become(right.unaryValue.remove)
        node.kind = isAdd ? .SUBTRACT : .ADD
      }

      # 0 + a => a
      # 0 - a => -a
      else if left.isZero {
        node.become(isAdd ? right.remove : Node.createUnary(.NEGATIVE, right.remove).withType(node.resolvedType))
      }

      # a + 0 => a
      # a - 0 => a
      else if right.isZero {
        node.become(left.remove)
      }
    }

    def _foldConstantIntegerMultiply(node Node, variable Node, constant Node) {
      assert(constant.isInt)

      # Apply identities
      var variableIsInt = variable.resolvedType == _cache.intType
      var value = constant.asInt

      # Replacing values with 0 only works for integers. Doubles can be NaN and
      # NaN times anything is NaN, zero included.
      if value == 0 && variableIsInt {
        if variable.hasNoSideEffects {
          node.become(constant.remove)
        }
        return
      }

      # This identity works even with NaN
      if value == 1 {
        node.become(variable.remove)
        return
      }

      # Multiply by a power of 2 should be a left-shift operation, which is
      # more concise and always faster (or at least never slower) than the
      # alternative. Division can't be replaced by a right-shift operation
      # because that would lead to incorrect results for negative numbers.
      if variableIsInt {
        var shift = _logBase2(value)
        if shift != -1 {
          # "x * 2 * 4" => "x << 3"
          if variable.kind == .SHIFT_LEFT && variable.binaryRight.isInt {
            shift += variable.binaryRight.asInt
            variable.replaceWith(variable.binaryLeft.remove)
          }

          constant.content = IntContent.new(shift)
          node.kind = .SHIFT_LEFT
        }
      }
    }

    # "((a >> 8) & 255) << 8" => "a & (255 << 8)"
    # "((a >>> 8) & 255) << 8" => "a & (255 << 8)"
    # "((a >> 7) & 255) << 8" => "(a << 1) & (255 << 8)"
    # "((a >>> 7) & 255) << 8" => "(a << 1) & (255 << 8)"
    # "((a >> 8) & 255) << 7" => "(a >> 1) & (255 << 7)"
    # "((a >>> 8) & 255) << 7" => "(a >>> 1) & (255 << 7)"
    def _foldConstantBitwiseAndInsideShift(node Node, andLeft Node, andRight Node) {
      assert(node.kind == .SHIFT_LEFT && node.binaryRight.isInt)

      if andRight.isInt && (andLeft.kind == .SHIFT_RIGHT || andLeft.kind == .UNSIGNED_SHIFT_RIGHT) && andLeft.binaryRight.isInt {
        var mask = andRight.asInt
        var leftShift = node.binaryRight.asInt
        var rightShift = andLeft.binaryRight.asInt
        var value = andLeft.binaryLeft.remove

        if leftShift < rightShift {
          value = Node.createBinary(andLeft.kind, value, _cache.createInt(rightShift - leftShift)).withType(_cache.intType)
        }

        else if leftShift > rightShift {
          value = Node.createBinary(.SHIFT_LEFT, value, _cache.createInt(leftShift - rightShift)).withType(_cache.intType)
        }

        node.become(Node.createBinary(.BITWISE_AND, value, _cache.createInt(mask << leftShift)).withType(node.resolvedType))
      }
    }

    def _foldConstantBitwiseAndInsideBitwiseOr(node Node) {
      assert(node.kind == .BITWISE_OR && node.binaryLeft.kind == .BITWISE_AND)

      var left = node.binaryLeft
      var right = node.binaryRight
      var leftLeft = left.binaryLeft
      var leftRight = left.binaryRight

      # "(a & b) | (a & c)" => "a & (b | c)"
      if right.kind == .BITWISE_AND {
        var rightLeft = right.binaryLeft
        var rightRight = right.binaryRight

        if leftRight.isInt && rightRight.isInt && _isSameVariableReference(leftLeft, rightLeft) {
          var mask = leftRight.asInt | rightRight.asInt
          node.become(Node.createBinary(.BITWISE_AND, leftLeft.remove, _cache.createInt(mask)).withType(node.resolvedType))
        }
      }

      # "(a & b) | c" => "a | c" when "(a | b) == ~0"
      else if right.isInt && leftRight.isInt && (leftRight.asInt | right.asInt) == ~0 {
        left.become(leftLeft.remove)
      }
    }

    def _foldBinaryWithConstant(node Node, left Node, right Node) {
      # There are lots of other folding opportunities for most binary operators
      # here but those usually have a negligible performance and/or size impact
      # on the generated code and instead slow the compiler down. Only certain
      # ones are implemented below.
      switch node.kind {
        # These are important for dead code elimination
        case .LOGICAL_AND {
          if left.isFalse || right.isTrue { node.become(left.remove) }
          else if left.isTrue { node.become(right.remove) }
        }
        case .LOGICAL_OR {
          if left.isTrue || right.isFalse { node.become(left.remove) }
          else if left.isFalse { node.become(right.remove) }
        }

        # Constants are often added up in compound expressions. Folding
        # addition/subtraction improves minification in JavaScript and often
        # helps with readability.
        case .ADD, .SUBTRACT {
          if left.isInt { _foldConstantIntegerAddOrSubtract(node, right, left, 0) }
          else if right.isInt { _foldConstantIntegerAddOrSubtract(node, left, right, 0) }
          else { _foldAddOrSubtract(node) }
        }

        # Multiplication is special-cased here because in JavaScript, optimizing
        # away the general-purpose Math.imul function may result in large
        # speedups when it's implemented with a polyfill.
        case .MULTIPLY {
          if right.isInt { _foldConstantIntegerMultiply(node, left, right) }
        }

        # This improves generated code for inlined bit packing functions
        case .SHIFT_LEFT, .SHIFT_RIGHT, .UNSIGNED_SHIFT_RIGHT {
          # "x << 0" => "x"
          # "x >> 0" => "x"
          # "x >>> 0" => "x"
          if _cache.isEquivalentToInt(left.resolvedType) && right.isInt && right.asInt == 0 {
            node.become(left.remove)
          }

          # Handle special cases of "&" nested inside "<<"
          else if node.kind == .SHIFT_LEFT && left.kind == .BITWISE_AND && right.isInt {
            _foldConstantBitwiseAndInsideShift(node, left.binaryLeft, left.binaryRight)
          }

          # "x << 1 << 2" => "x << 3"
          # "x >> 1 >> 2" => "x >> 3"
          # "x >>> 1 >>> 2" => "x >>> 3"
          else if node.kind == left.kind && left.binaryRight.isInt && right.isInt {
            _flattenInt(right, left.binaryRight.asInt + right.asInt)
            left.replaceWith(left.binaryLeft.remove)
          }
        }
        case .BITWISE_AND {
          if right.isInt && _cache.isEquivalentToInt(left.resolvedType) {
            var value = right.asInt

            # "x & ~0" => "x"
            if value == ~0 {
              node.become(left.remove)
            }

            # "x & 0" => "0"
            else if value == 0 && left.hasNoSideEffects {
              node.become(right.remove)
            }
          }
        }
        case .BITWISE_OR {
          if right.isInt && _cache.isEquivalentToInt(left.resolvedType) {
            var value = right.asInt

            # "x | 0" => "x"
            if value == 0 {
              node.become(left.remove)
              return
            }

            # "x | ~0" => "~0"
            else if value == ~0 && left.hasNoSideEffects {
              node.become(right.remove)
              return
            }
          }
          if left.kind == .BITWISE_AND { _foldConstantBitwiseAndInsideBitwiseOr(node) }
        }
      }
    }

    def _foldBinary(node Node) {
      var kind = node.kind
      if kind == .ADD && node.resolvedType == _cache.stringType {
        _foldStringConcatenation(node)
        return
      }

      var left = node.binaryLeft
      var right = node.binaryRight

      # Canonicalize the order of commutative operators
      if (kind == .MULTIPLY || kind == .BITWISE_AND || kind == .BITWISE_OR) && left.kind == .CONSTANT && right.kind != .CONSTANT {
        var temp = left
        left = right
        right = temp
        left.swapWith(right)
      }

      if left.kind == .CONSTANT && right.kind == .CONSTANT {
        var leftContent = left.content
        var rightContent = right.content
        var leftKind = leftContent.kind
        var rightKind = rightContent.kind

        # Fold equality operators
        if leftKind == .STRING && rightKind == .STRING {
          switch kind {
            case .EQUAL { _flattenBool(node, leftContent.asString == rightContent.asString) }
            case .NOT_EQUAL { _flattenBool(node, leftContent.asString != rightContent.asString) }
            case .LESS_THAN { _flattenBool(node, leftContent.asString < rightContent.asString) }
            case .GREATER_THAN { _flattenBool(node, leftContent.asString > rightContent.asString) }
            case .LESS_THAN_OR_EQUAL { _flattenBool(node, leftContent.asString <= rightContent.asString) }
            case .GREATER_THAN_OR_EQUAL { _flattenBool(node, leftContent.asString >= rightContent.asString) }
          }
          return
        }

        # Fold "bool" values
        else if leftKind == .BOOL && rightKind == .BOOL {
          switch kind {
            case .LOGICAL_AND { _flattenBool(node, leftContent.asBool && rightContent.asBool) }
            case .LOGICAL_OR { _flattenBool(node, leftContent.asBool || rightContent.asBool) }
            case .EQUAL { _flattenBool(node, leftContent.asBool == rightContent.asBool) }
            case .NOT_EQUAL { _flattenBool(node, leftContent.asBool != rightContent.asBool) }
          }
          return
        }

        # Fold "int" values
        else if leftKind == .INT && rightKind == .INT {
          switch kind {
            case .ADD { _flattenInt(node, leftContent.asInt + rightContent.asInt) }
            case .BITWISE_AND { _flattenInt(node, leftContent.asInt & rightContent.asInt) }
            case .BITWISE_OR { _flattenInt(node, leftContent.asInt | rightContent.asInt) }
            case .BITWISE_XOR { _flattenInt(node, leftContent.asInt ^ rightContent.asInt) }
            case .DIVIDE { _flattenInt(node, leftContent.asInt / rightContent.asInt) }
            case .EQUAL { _flattenBool(node, leftContent.asInt == rightContent.asInt) }
            case .GREATER_THAN { _flattenBool(node, leftContent.asInt > rightContent.asInt) }
            case .GREATER_THAN_OR_EQUAL { _flattenBool(node, leftContent.asInt >= rightContent.asInt) }
            case .LESS_THAN { _flattenBool(node, leftContent.asInt < rightContent.asInt) }
            case .LESS_THAN_OR_EQUAL { _flattenBool(node, leftContent.asInt <= rightContent.asInt) }
            case .MULTIPLY { _flattenInt(node, leftContent.asInt * rightContent.asInt) }
            case .NOT_EQUAL { _flattenBool(node, leftContent.asInt != rightContent.asInt) }
            case .REMAINDER { _flattenInt(node, leftContent.asInt % rightContent.asInt) }
            case .SHIFT_LEFT { _flattenInt(node, leftContent.asInt << rightContent.asInt) }
            case .SHIFT_RIGHT { _flattenInt(node, leftContent.asInt >> rightContent.asInt) }
            case .SUBTRACT { _flattenInt(node, leftContent.asInt - rightContent.asInt) }
            case .UNSIGNED_SHIFT_RIGHT { _flattenInt(node, leftContent.asInt >>> rightContent.asInt) }
          }
          return
        }

        # Fold "double" values
        else if leftKind == .DOUBLE && rightKind == .DOUBLE {
          switch kind {
            case .ADD { _flattenDouble(node, leftContent.asDouble + rightContent.asDouble) }
            case .SUBTRACT { _flattenDouble(node, leftContent.asDouble - rightContent.asDouble) }
            case .MULTIPLY { _flattenDouble(node, leftContent.asDouble * rightContent.asDouble) }
            case .DIVIDE { _flattenDouble(node, leftContent.asDouble / rightContent.asDouble) }
            case .EQUAL { _flattenBool(node, leftContent.asDouble == rightContent.asDouble) }
            case .NOT_EQUAL { _flattenBool(node, leftContent.asDouble != rightContent.asDouble) }
            case .LESS_THAN { _flattenBool(node, leftContent.asDouble < rightContent.asDouble) }
            case .GREATER_THAN { _flattenBool(node, leftContent.asDouble > rightContent.asDouble) }
            case .LESS_THAN_OR_EQUAL { _flattenBool(node, leftContent.asDouble <= rightContent.asDouble) }
            case .GREATER_THAN_OR_EQUAL { _flattenBool(node, leftContent.asDouble >= rightContent.asDouble) }
          }
          return
        }
      }

      _foldBinaryWithConstant(node, left, right)
    }

    def _foldHook(node Node) {
      var test = node.hookTest
      if test.isTrue { node.become(node.hookTrue.remove) }
      else if test.isFalse { node.become(node.hookFalse.remove) }
    }

    def constantForSymbol(symbol VariableSymbol) Content {
      if symbol.id in _constantCache {
        return _constantCache[symbol.id]
      }

      if _prepareSymbol != null {
        _prepareSymbol(symbol)
      }

      var constant Content = null
      var value = symbol.value

      if symbol.isConst && value != null {
        _constantCache[symbol.id] = null
        value = value.clone
        foldConstants(value)
        if value.kind == .CONSTANT {
          constant = value.content
        }
      }

      _constantCache[symbol.id] = constant
      return constant
    }
  }

  namespace ConstantFolder {
    def _isVariableReference(node Node) bool {
      return node.kind == .NAME && node.symbol != null && node.symbol.kind.isVariable
    }

    def _isSameVariableReference(a Node, b Node) bool {
      return
        _isVariableReference(a) && _isVariableReference(b) && a.symbol == b.symbol ||
        a.kind == .CAST && b.kind == .CAST && _isSameVariableReference(a.castValue, b.castValue)
    }

    def _hasNestedReference(node Node, symbol Symbol) bool {
      assert(symbol != null)
      if node.symbol == symbol {
        return true
      }
      for child = node.firstChild; child != null; child = child.nextSibling {
        if _hasNestedReference(child, symbol) {
          return true
        }
      }
      return false
    }

    def _shouldFoldSymbol(symbol Symbol) bool {
      return symbol != null && symbol.isConst && (symbol.kind != .VARIABLE_INSTANCE || symbol.isImported)
    }

    def _isKnownCall(symbol Symbol, knownSymbol Symbol) bool {
      return symbol == knownSymbol || symbol != null && symbol.kind.isFunction && (
        symbol.asFunctionSymbol.overloaded == knownSymbol ||
        knownSymbol.kind.isFunction && symbol.asFunctionSymbol.overloaded != null &&
          symbol.asFunctionSymbol.overloaded == knownSymbol.asFunctionSymbol.overloaded &&
          symbol.asFunctionSymbol.argumentOnlyType == knownSymbol.asFunctionSymbol.argumentOnlyType)
    }

    # Returns the log2(value) or -1 if log2(value) is not an integer
    def _logBase2(value int) int {
      if value < 1 || (value & (value - 1)) != 0 {
        return -1
      }
      var result = 0
      while value > 1 {
        value >>= 1
        result++
      }
      return result
    }
  }
}
