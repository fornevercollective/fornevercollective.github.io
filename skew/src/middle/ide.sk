namespace Skew.IDE {
  class SymbolQuery {
    const source Source
    const index int

    var resolvedType Type = null
    var symbol Symbol = null
    var range Range = null

    def generateTooltip string {
      if symbol == null {
        return null
      }

      var text = ""
      if symbol.comments != null {
        for comment in symbol.comments {
          if !comment.hasGapBelow {
            for line in comment.lines {
              text += "#\(line)\n"
            }
          }
        }
      }

      switch symbol.kind {
        case .FUNCTION_ANNOTATION, .FUNCTION_CONSTRUCTOR, .FUNCTION_GLOBAL, .FUNCTION_INSTANCE {
          var arguments = symbol.asFunctionSymbol.arguments
          text += "\(symbol.isOver ? "over" : "def") \(symbol.name)\(_parameters(symbol.asFunctionSymbol.parameters))"
          if resolvedType != null && resolvedType.argumentTypes != null {
            if !arguments.isEmpty {
              text += "("
              for i in 0..arguments.count {
                if i != 0 {
                  text += ", "
                }
                text += "\(arguments[i].name) \(resolvedType.argumentTypes[i])"
              }
              text += ")"
            }
            if resolvedType.returnType != null {
              text += " \(resolvedType.returnType)"
            }
          } else {
            text += " dynamic"
          }
        }

        case .VARIABLE_ARGUMENT, .VARIABLE_ENUM_OR_FLAGS, .VARIABLE_GLOBAL, .VARIABLE_INSTANCE, .VARIABLE_LOCAL {
          var value = symbol.asVariableSymbol.value
          text += "\(symbol.isConst ? "const" : "var") \(symbol.name)"
          text += resolvedType != null ? " \(resolvedType)" : " dynamic"
          if symbol.isConst && !symbol.isLoopVariable && value != null && value.kind == .CONSTANT {
            text += " = "
            switch value.content.kind {
              case .BOOL { text += value.asBool.toString }
              case .DOUBLE { text += value.asDouble.toString }
              case .INT { text += value.asInt.toString }
              case .STRING { text += quoteString(value.asString, .DOUBLE, .NORMAL) }
            }
          }
        }

        case .OBJECT_CLASS {
          text += "class \(symbol.name)\(_parameters(symbol.asObjectSymbol.parameters))"
          if symbol.asObjectSymbol.baseType != null {
            text += " : \(symbol.asObjectSymbol.baseType)"
          }
          if symbol.asObjectSymbol.interfaceTypes != null {
            var types = symbol.asObjectSymbol.interfaceTypes
            for i in 0..types.count {
              text += "\(i != 0 ? ", " : " :: ")\(types[i])"
            }
          }
        }

        case .OBJECT_WRAPPED {
          text += "type \(symbol.name)\(_parameters(symbol.asObjectSymbol.parameters))"
          if symbol.asObjectSymbol.wrappedType != null {
            text += " = \(symbol.asObjectSymbol.wrappedType)"
          }
        }

        case .OBJECT_ENUM {
          text += "enum \(symbol.name)"
        }

        case .OBJECT_FLAGS {
          text += "flags \(symbol.name)"
        }

        case .OBJECT_INTERFACE {
          text += "interface \(symbol.name)\(_parameters(symbol.asObjectSymbol.parameters))"
        }

        case .OBJECT_NAMESPACE {
          text += "namespace \(symbol.name)"
        }

        default {
          text += symbol.name
        }
      }

      return text
    }

    def run(global ObjectSymbol) {
      var findSymbolInSymbol fn(Symbol) bool
      var findSymbolInObject fn(ObjectSymbol) bool
      var findSymbolInParameter fn(ParameterSymbol) bool
      var findSymbolInFunction fn(FunctionSymbol) bool
      var findSymbolInVariable fn(VariableSymbol) bool
      var findSymbolInNode fn(Node) bool

      findSymbolInSymbol = symbol => {
        while true {
          if symbol.annotations != null {
            for node in symbol.annotations {
              if findSymbolInNode(node) {
                return true
              }
            }
          }
          if _findSymbolInRange(symbol.range, symbol) {
            resolvedType = symbol.resolvedType
            return true
          }
          if symbol.nextMergedSymbol == null {
            return false
          }
          symbol = symbol.nextMergedSymbol
        }
      }

      findSymbolInObject = symbol => {
        return
          findSymbolInSymbol(symbol) ||
          symbol.objects.any(findSymbolInObject) ||
          symbol.parameters != null && symbol.parameters.any(findSymbolInParameter) ||
          symbol.functions.any(findSymbolInFunction) ||
          symbol.variables.any(findSymbolInVariable) ||
          findSymbolInNode(symbol.extends) ||
          symbol.implements != null && symbol.implements.any(findSymbolInNode)
      }

      findSymbolInParameter = symbol => {
        return findSymbolInSymbol(symbol)
      }

      findSymbolInFunction = symbol => {
        if symbol.isAutomaticallyGenerated {
          return false
        }
        return
          findSymbolInSymbol(symbol) ||
          symbol.parameters != null && symbol.parameters.any(findSymbolInParameter) ||
          symbol.arguments.any(findSymbolInVariable) ||
          findSymbolInNode(symbol.returnType) ||
          findSymbolInNode(symbol.block)
      }

      findSymbolInVariable = symbol => {
        return
          findSymbolInSymbol(symbol) ||
          findSymbolInNode(symbol.value) ||
          findSymbolInNode(symbol.type)
      }

      findSymbolInNode = node => {
        if node != null {
          var kind = node.kind

          if kind == .VARIABLE {
            return findSymbolInVariable(node.symbol.asVariableSymbol)
          }

          for child = node.firstChild; child != null; child = child.nextSibling {
            if findSymbolInNode(child) {
              return true
            }
          }

          if !node.isIgnoredByIDE {
            if kind == .NAME && _findSymbolInRange(node.range, node.symbol) {
              resolvedType = node.resolvedType
              return true
            }

            if (kind == .DOT || kind.isUnary || kind.isBinary) && _findSymbolInRange(node.internalRangeOrRange, node.symbol) {
              resolvedType = kind == .DOT ? node.resolvedType : node.symbol?.resolvedType
              return true
            }
          }

          if kind == .LAMBDA {
            return
              node.symbol.asFunctionSymbol.arguments.any(findSymbolInVariable) ||
              findSymbolInNode(node.symbol.asFunctionSymbol.returnType)
          }
        }

        return false
      }

      findSymbolInObject(global)
    }

    def _findSymbolInRange(queryRange Range, querySymbol Symbol) bool {
      if queryRange != null && queryRange.source == source && queryRange.touches(index) {
        symbol = querySymbol
        range = queryRange
        return true
      }

      return false
    }

    def _parameters(parameters List<ParameterSymbol>) string {
      var text = ""
      if parameters != null {
        text += "<"
        for i in 0..parameters.count {
          if i != 0 {
            text += ", "
          }
          text += parameters[i].name
        }
        text += ">"
      }
      return text
    }
  }

  class SymbolsQuery {
    const source Source
    const symbols List<Symbol> = []

    def run(symbol ObjectSymbol) {
      _collectSymbol(symbol)

      for object in symbol.objects {
        run(object)
      }

      for function in symbol.functions {
        _collectSymbol(function)
      }

      for variable in symbol.variables {
        _collectSymbol(variable)
      }
    }

    def _collectSymbol(symbol Symbol) {
      if symbol.range != null && (source == null || symbol.range.source == source) && !symbol.isAutomaticallyGenerated {
        symbols.append(symbol)
      }
    }
  }

  class RenameQuery {
    const source Source
    const index int
    const ranges List<Range> = []
    const _targets IntMap<int> = {}
    var _targetName string = null

    def run(global ObjectSymbol) {
      var query = SymbolQuery.new(source, index)
      query.run(global)
      var symbol = query.symbol

      if symbol != null {
        _targetName = symbol.name
        _targets[symbol.id] = 0

        # Make sure interfaces and overridden methods are all renamed together
        if symbol.kind.isFunction {
          _includeRelatedFunctions(global, symbol.asFunctionSymbol)
        }

        _visitObject(global)

        # Remove overlapping ranges since they are sometimes generated as a side effect of lowering
        var current Range = null
        ranges.sort((a, b) => a.source == b.source
          ? a.start <=> b.start
          : a.source.name <=> b.source.name)
        ranges.removeIf(range => {
          var previous = current
          current = range
          return previous != null && current.overlaps(previous)
        })
      }
    }

    def _includeRelatedFunctions(global ObjectSymbol, symbol FunctionSymbol) {
      var functions List<FunctionSymbol> = []
      var wasFound = false

      # Gather all non-local functions
      _searchForFunctions(global, functions)
      var labels = UnionFind.new.allocate(functions.count)

      # Assign each one an index
      for i in 0..functions.count {
        var function = functions[i]
        function.namingGroup = i
        if function == symbol {
          wasFound = true
        }
      }

      # Lambda functions won't be found
      if wasFound {
        # Merge related functions together (this is the O(n log n) way to find all related functions)
        for function in functions {
          if function.overridden != null {
            labels.union(function.namingGroup, function.overridden.namingGroup)
          }
          if function.implementations != null {
            for implementation in function.implementations {
              labels.union(function.namingGroup, implementation.namingGroup)
            }
          }
        }

        # Extract the relevant functions
        var label = labels.find(symbol.namingGroup)
        for function in functions {
          if labels.find(function.namingGroup) == label {
            _targets[function.id] = 0
          }
        }
      }
    }

    def _appendRange(range Range) {
      # Sanity check the range to make sure it contains the target name
      if range != null && range.toString == _targetName {
        ranges.append(range)
      }
    }

    def _visitSymbol(symbol Symbol) {
      var isTarget = symbol.id in _targets

      while symbol != null {
        if symbol.annotations != null {
          for node in symbol.annotations {
            _visitNode(node)
          }
        }

        if isTarget && symbol.range != null {
          _appendRange(symbol.range)
        }

        symbol = symbol.nextMergedSymbol
      }
    }

    def _visitObject(symbol ObjectSymbol) {
      _visitSymbol(symbol)
      _visitParameters(symbol.parameters)
      _visitNode(symbol.extends)

      for object in symbol.objects {
        _visitObject(object)
      }

      for function in symbol.functions {
        _visitFunction(function)
      }

      for variable in symbol.variables {
        _visitVariable(variable)
      }

      if symbol.implements != null {
        for node in symbol.implements {
          _visitNode(node)
        }
      }
    }

    def _visitParameters(parameters List<ParameterSymbol>) {
      if parameters != null {
        for parameter in parameters {
          _visitSymbol(parameter)
        }
      }
    }

    def _visitFunction(symbol FunctionSymbol) {
      _visitSymbol(symbol)
      _visitParameters(symbol.parameters)
      _visitNode(symbol.returnType)
      _visitNode(symbol.block)

      for argument in symbol.arguments {
        _visitVariable(argument)
      }
    }

    def _visitVariable(symbol VariableSymbol) {
      _visitSymbol(symbol)
      _visitNode(symbol.type)
      _visitNode(symbol.value)
    }

    def _visitNode(node Node) {
      if node != null {
        var kind = node.kind

        if kind == .VARIABLE {
          _visitVariable(node.symbol.asVariableSymbol)
          return
        }

        for child = node.firstChild; child != null; child = child.nextSibling {
          _visitNode(child)
        }

        if kind == .LAMBDA {
          for argument in node.symbol.asFunctionSymbol.arguments {
            _visitVariable(argument)
          }
          _visitNode(node.symbol.asFunctionSymbol.returnType)
        }

        else if node.symbol != null && node.symbol.id in _targets && !node.isIgnoredByIDE {
          if kind == .NAME {
            _appendRange(node.range)
          }

          else if kind == .DOT {
            _appendRange(node.internalRange)
          }
        }
      }
    }
  }

  namespace RenameQuery {
    def _searchForFunctions(symbol ObjectSymbol, functions List<FunctionSymbol>) {
      for object in symbol.objects {
        _searchForFunctions(object, functions)
      }

      for function in symbol.functions {
        functions.append(function)
      }
    }
  }

  def completionType(symbol Symbol) string {
    if symbol.kind.isFunction {
      var text = "("
      var function = symbol.asFunctionSymbol
      for argument in function.arguments {
        if text != "(" {
          text += ", "
        }
        text += "\(argument.name) \(argument.resolvedType)"
      }
      text += ")"
      if function.resolvedType.returnType != null {
        text += " \(function.resolvedType.returnType)"
      }
      return text
    }

    if symbol.kind.isVariable {
      return symbol.resolvedType.toString
    }

    switch symbol.kind {
      case .OBJECT_CLASS { return "class" }
      case .OBJECT_ENUM { return "enum" }
      case .OBJECT_FLAGS { return "flags" }
      case .OBJECT_INTERFACE { return "interface" }
      case .OBJECT_NAMESPACE { return "namespace" }
      case .OBJECT_WRAPPED { return "type" }
    }

    return null
  }

  class SignatureQuery {
    const source Source
    const index int
    var signature FunctionSymbol = null
    var argumentIndex = -1

    def signatureString string {
      if signature == null {
        return null
      }

      var text = "\(signature.isOver ? "over" : "def") \(signature.name)("
      for i in 0..signature.arguments.count {
        var argument = signature.arguments[i]
        if i != 0 {
          text += ", "
        }
        text += "\(argument.name) \(argument.resolvedType)"
      }
      text += ")"
      if signature.resolvedType.returnType != null {
        text += " \(signature.resolvedType.returnType)"
      }

      return text
    }

    def argumentStrings List<string> {
      var list List<string> = []
      for argument in signature.arguments {
        list.append("\(argument.name) \(argument.resolvedType)")
      }
      return list
    }

    def run(global ObjectSymbol) {
      var findSignatureInSymbol fn(Symbol) bool
      var findSignatureInObject fn(ObjectSymbol) bool
      var findSignatureInFunction fn(FunctionSymbol) bool
      var findSignatureInVariable fn(VariableSymbol) bool
      var findSignatureInNode fn(Node) bool

      findSignatureInSymbol = symbol => {
        while true {
          if symbol.annotations != null {
            for node in symbol.annotations {
              if findSignatureInNode(node) {
                return true
              }
            }
          }
          if symbol.nextMergedSymbol == null {
            return false
          }
          symbol = symbol.nextMergedSymbol
        }
      }

      findSignatureInObject = symbol => {
        return
          findSignatureInSymbol(symbol) ||
          symbol.objects.any(findSignatureInObject) ||
          symbol.functions.any(findSignatureInFunction) ||
          symbol.variables.any(findSignatureInVariable) ||
          findSignatureInNode(symbol.extends) ||
          symbol.implements != null && symbol.implements.any(findSignatureInNode)
      }

      findSignatureInFunction = symbol => {
        if symbol.isAutomaticallyGenerated {
          return false
        }
        return
          findSignatureInSymbol(symbol) ||
          symbol.arguments.any(findSignatureInVariable) ||
          findSignatureInNode(symbol.block)
      }

      findSignatureInVariable = symbol => {
        return
          findSignatureInSymbol(symbol) ||
          findSignatureInNode(symbol.value)
      }

      findSignatureInNode = node => {
        if node != null {
          var kind = node.kind

          if kind == .VARIABLE {
            return findSignatureInVariable(node.symbol.asVariableSymbol)
          }

          for child = node.firstChild; child != null; child = child.nextSibling {
            if findSignatureInNode(child) {
              return true
            }
          }

          if kind == .CALL && node.symbol != null && node.internalRange != null && node.internalRange.source == source && node.internalRange.touches(index) {
            signature = node.symbol.asFunctionSymbol

            # Find the argument containing the query location, if any
            if !signature.arguments.isEmpty {
              argumentIndex = 0
              var limit = signature.arguments.count
              for child = node.callValue.nextSibling; child != null; child = child.nextSibling {
                if child.range != null && index <= child.range.end || argumentIndex + 1 >= limit {
                  break
                }
                argumentIndex++
              }
            }

            return true
          }
        }

        return false
      }

      findSignatureInObject(global)
    }
  }
}
