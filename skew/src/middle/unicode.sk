namespace Skew {
  const UNICODE_LIBRARY = "
namespace Unicode {
  enum Encoding {
    UTF8
    UTF16
    UTF32
  }

  const STRING_ENCODING Encoding =
    TARGET == .CPLUSPLUS ? .UTF8 :
    TARGET == .CSHARP || TARGET == .JAVASCRIPT ? .UTF16 :
    .UTF32

  class StringIterator {
    var value = \"\"
    var index = 0
    var stop = 0

    def reset(text string, start int) StringIterator {
      value = text
      index = start
      stop = text.count
      return self
    }

    def countCodePointsUntil(stop int) int {
      var count = 0
      while index < stop && nextCodePoint >= 0 {
        count++
      }
      return count
    }

    def previousCodePoint int
    def nextCodePoint int

    if STRING_ENCODING == .UTF8 {
      def previousCodePoint int {
        if index <= 0 { return -1 }
        var a = value[--index]
        if (a & 0xC0) != 0x80 { return a }
        if index <= 0 { return -1 }
        var b = value[--index]
        if (b & 0xC0) != 0x80 { return ((b & 0x1F) << 6) | (a & 0x3F) }
        if index <= 0 { return -1 }
        var c = value[--index]
        if (c & 0xC0) != 0x80 { return ((c & 0x0F) << 12) | ((b & 0x3F) << 6) | (a & 0x3F) }
        if index >= stop { return -1 }
        var d = value[--index]
        return ((d & 0x07) << 18) | ((c & 0x3F) << 12) | ((b & 0x3F) << 6) | (a & 0x3F)
      }

      def nextCodePoint int {
        if index >= stop { return -1 }
        var a = value[index++]
        if a < 0xC0 { return a }
        if index >= stop { return -1 }
        var b = value[index++]
        if a < 0xE0 { return ((a & 0x1F) << 6) | (b & 0x3F) }
        if index >= stop { return -1 }
        var c = value[index++]
        if a < 0xF0 { return ((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F) }
        if index >= stop { return -1 }
        var d = value[index++]
        return ((a & 0x07) << 18) | ((b & 0x3F) << 12) | ((c & 0x3F) << 6) | (d & 0x3F)
      }
    }

    else if STRING_ENCODING == .UTF16 {
      def previousCodePoint int {
        if index <= 0 { return -1 }
        var a = value[--index]
        if (a & 0xFC00) != 0xDC00 { return a }
        if index <= 0 { return -1 }
        var b = value[--index]
        return (b << 10) + a + (0x10000 - (0xD800 << 10) - 0xDC00)
      }

      def nextCodePoint int {
        if index >= stop { return -1 }
        var a = value[index++]
        if (a & 0xFC00) != 0xD800 { return a }
        if index >= stop { return -1 }
        var b = value[index++]
        return (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00)
      }
    }

    else {
      def previousCodePoint int {
        if index <= 0 { return -1 }
        return value[--index]
      }

      def nextCodePoint int {
        if index >= stop { return -1 }
        return value[index++]
      }
    }
  }

  namespace StringIterator {
    const INSTANCE = StringIterator.new
  }

  def codeUnitCountForCodePoints(codePoints List<int>, encoding Encoding) int {
    var count = 0

    switch encoding {
      case .UTF8 {
        for codePoint in codePoints {
          if codePoint < 0x80 { count++ }
          else if codePoint < 0x800 { count += 2 }
          else if codePoint < 0x10000 { count += 3 }
          else { count += 4 }
        }
      }

      case .UTF16 {
        for codePoint in codePoints {
          if codePoint < 0x10000 { count++ }
          else { count += 2 }
        }
      }

      case .UTF32 {
        count = codePoints.count
      }
    }

    return count
  }
}

class string {
  if Unicode.STRING_ENCODING == .UTF32 {
    def codePoints List<int> {
      return codeUnits
    }
  }

  else {
    def codePoints List<int> {
      var codePoints List<int> = []
      var instance = Unicode.StringIterator.INSTANCE
      instance.reset(self, 0)

      while true {
        var codePoint = instance.nextCodePoint
        if codePoint < 0 {
          return codePoints
        }
        codePoints.append(codePoint)
      }
    }
  }
}

namespace string {
  def fromCodePoints(codePoints List<int>) string {
    var builder = StringBuilder.new
    for codePoint in codePoints {
      builder.append(fromCodePoint(codePoint))
    }
    return builder.toString
  }

  if Unicode.STRING_ENCODING == .UTF8 {
    def fromCodePoint(codePoint int) string {
      return
        codePoint < 0x80 ? fromCodeUnit(codePoint) : (
          codePoint < 0x800 ? fromCodeUnit(((codePoint >> 6) & 0x1F) | 0xC0) : (
            codePoint < 0x10000 ? fromCodeUnit(((codePoint >> 12) & 0x0F) | 0xE0) : (
              fromCodeUnit(((codePoint >> 18) & 0x07) | 0xF0)
            ) + fromCodeUnit(((codePoint >> 12) & 0x3F) | 0x80)
          ) + fromCodeUnit(((codePoint >> 6) & 0x3F) | 0x80)
        ) + fromCodeUnit((codePoint & 0x3F) | 0x80)
    }
  }

  else if Unicode.STRING_ENCODING == .UTF16 {
    def fromCodePoint(codePoint int) string {
      return codePoint < 0x10000 ? fromCodeUnit(codePoint) :
        fromCodeUnit(((codePoint - 0x10000) >> 10) + 0xD800) +
        fromCodeUnit(((codePoint - 0x10000) & ((1 << 10) - 1)) + 0xDC00)
    }
  }

  else {
    def fromCodePoint(codePoint int) string {
      return fromCodeUnit(codePoint)
    }
  }
}
"
}
