namespace Skew.API {
  def sourcesToJSON(sources List<Source>) dynamic {
    return sources.map<dynamic>(source => {
      return {
        "name": source.name,
        "contents": source.contents,
      }
    })
  }

  def diagnosticsToJSON(diagnostics List<Diagnostic>) dynamic {
    return diagnostics.map<dynamic>(diagnostic => {
      return {
        "kind": diagnostic.kind.toString.toLowerCase,
        "range": rangeToJSON(diagnostic.range),
        "text": diagnostic.text,
        "fixes": diagnostic.fixes == null ? [] : diagnostic.fixes.map<dynamic>(fix => ({
          "kind": fix.kind, # Only useful for telling which fixes are related
          "range": rangeToJSON(fix.range),
          "expected": fix.range.toString,
          "description": fix.description,
          "replacement": fix.replacement,
        }))
      }
    })
  }

  var rangeToJSON = (range Range) dynamic => {
    if range == null {
      return null
    }

    var source = range.source
    var start = source.indexToLineColumn(range.start)
    var end = source.indexToLineColumn(range.end)

    return {
      "source": source.name,
      "start": {
        "line": start.line,
        "column": start.column,
      },
      "end": {
        "line": end.line,
        "column": end.column,
      },
    }
  }

  def parseOptions(args dynamic, inputs List<Source>) CompilerOptions {
    if !(args.inputs is List<dynamic>) {
      throw dynamic.Error.new("Missing the required 'inputs' array")
    }

    var options = CompilerOptions.new
    var release = !!args.release
    options.foldAllConstants = !!args.foldAllConstants || release
    options.globalizeAllFunctions = !!args.globalizeAllFunctions || release
    options.inlineAllFunctions = !!args.inlineAllFunctions || release
    options.jsMangle = !!args.jsMangle || release
    options.jsMinify = !!args.jsMinify || release
    options.jsSourceMap = !!args.jsSourceMap
    options.outputDirectory = args.outputDirectory ? args.outputDirectory + "" : null
    options.outputFile = args.outputFile ? args.outputFile + "" : null
    options.stopAfterResolve = !!args.stopAfterResolve

    if args.defines {
      var defines = args.defines
      for key in dynamic.Object.keys(defines) as List<string> {
        options.define(key, defines[key] + "")
      }
    }

    if release {
      options.define("RELEASE", "true")
    }

    switch args.target {
      case "c#" { options.target = CSharpTarget.new }
      case "ts" { options.target = TypeScriptTarget.new }
      case "c++" { options.target = CPlusPlusTarget.new }
      case "js" { options.target = JavaScriptTarget.new }
      case "lisp-tree" { options.target = LispTreeTarget.new }
      default {
        if !options.createTargetFromExtension {
          throw dynamic.Error.new("Invalid target '\(args.target)'")
        }
      }
    }

    for i in 0..args.inputs.length {
      var input = args.inputs[i]
      inputs.append(Source.new(input.name + "", input.contents + ""))
    }

    return options
  }

  var createCompilerInstance fn() dynamic = => {
    var result CompilerResult = null
    var inputs List<Source> = null
    var log Log = null

    var handleCompile = (message dynamic) dynamic => {
      inputs = []
      log = Log.new
      result = compile(log, parseOptions(message, inputs), inputs)

      return {
        "type": "compile",
        "id": message.id,
        "outputs": sourcesToJSON(result.outputs),
        "log": {
          "text": log.toString,
          "diagnostics": diagnosticsToJSON(log.diagnostics),
        },
      }
    }

    var handleTooltipQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var line int = message.line | 0
      var column int = message.column | 0
      var ignoreDiagnostics bool = !!message.ignoreDiagnostics
      var range Range = null
      var tooltip string = null
      var symbol string = null

      if inputs != null {
        for source in inputs {
          if source.name == name {
            var index = source.lineColumnToIndex(line, column)
            if index != -1 {
              # Search diagnostics first
              if !ignoreDiagnostics && log != null {
                for diagnostic in log.diagnostics {
                  if diagnostic.range != null && diagnostic.range.source == source && diagnostic.range.touches(index) {
                    tooltip = diagnostic.text
                    range = diagnostic.range
                    break
                  }
                }
              }

              # Search the syntax tree next
              if tooltip == null && result != null && result.global != null {
                var query = IDE.SymbolQuery.new(source, index)
                query.run(result.global)
                if query.symbol != null {
                  tooltip = query.generateTooltip
                  range = query.range
                  symbol = query.symbol.fullName
                }
              }
            }
            break
          }
        }
      }

      return {
        "type": "tooltip-query",
        "id": message.id,
        "source": name,
        "tooltip": tooltip,
        "range": rangeToJSON(range),
        "symbol": symbol,
      }
    }

    var handleDefinitionQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var line int = message.line | 0
      var column int = message.column | 0
      var range Range = null
      var definition Range = null
      var symbol string = null

      if inputs != null {
        for source in inputs {
          if source.name == name {
            var index = source.lineColumnToIndex(line, column)
            if index != -1 && result != null && result.global != null {
              var query = IDE.SymbolQuery.new(source, index)
              query.run(result.global)
              if query.symbol != null {
                definition = query.symbol.range
                range = query.range
                symbol = query.symbol.fullName
              }
            }
            break
          }
        }
      }

      return {
        "type": "definition-query",
        "id": message.id,
        "source": name,
        "definition": rangeToJSON(definition),
        "range": rangeToJSON(range),
        "symbol": symbol,
      }
    }

    var handleSymbolsQuery = (message dynamic) dynamic => {
      var symbols List<Symbol> = []

      # List all symbols in a given source file
      if message.source {
        var name string = message.source + ""
        if inputs != null {
          for source in inputs {
            if source.name == name {
              if result != null && result.global != null {
                var query = IDE.SymbolsQuery.new(source)
                query.run(result.global)
                symbols = query.symbols
              }
              break
            }
          }
        }
      }

      # List all symbols matching a given substring
      else if message.fuzzyName {
        var nameSubstring string = message.fuzzyName + ""
        nameSubstring = nameSubstring.toLowerCase
        if inputs != null && result != null && result.global != null {
          var query = IDE.SymbolsQuery.new(null)
          query.run(result.global)
          for symbol in query.symbols {
            if symbol.name.toLowerCase.indexOf(nameSubstring) >= 0 {
              symbols.append(symbol)
            }
          }
        }
      }

      return {
        "type": "symbols-query",
        "id": message.id,
        "symbols": symbols.isEmpty ? null : symbols.map<dynamic>(symbol => ({
          "name": symbol.name,
          "kind": symbol.kind.toString,
          "parent": symbol.parent == null || symbol == result.global ? -1 : symbols.indexOf(symbol.parent),
          "fullName": symbol.fullName,
          "range": rangeToJSON(symbol.range),
        })),
      }
    }

    var handleRenameQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var line int = message.line | 0
      var column int = message.column | 0
      var ranges List<Range> = null

      if inputs != null {
        for source in inputs {
          if source.name == name {
            var index = source.lineColumnToIndex(line, column)
            if index != -1 && result != null && result.global != null {
              var query = IDE.RenameQuery.new(source, index)
              query.run(result.global)
              ranges = query.ranges
            }
            break
          }
        }
      }

      return {
        "type": "rename-query",
        "id": message.id,
        "source": name,
        "ranges": ranges == null ? null : ranges.map<dynamic>(rangeToJSON),
      }
    }

    var handleCompletionQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var line int = message.line | 0
      var column int = message.column | 0
      var range Range = null
      var completions List<Symbol> = null
      var inputs List<Source> = []
      var log = Log.new
      var options = parseOptions(message, inputs)

      # Completion queries involve compiling the source code again because it requires scope information
      for input in inputs {
        if input.name == name {
          var index = input.lineColumnToIndex(line, column)
          if index != -1 {
            options.stopAfterResolve = true
            options.completionContext = CompletionContext.new(input, index)
            compile(log, options, inputs)
            range = options.completionContext.range
            completions = options.completionContext.completions
          }
          break
        }
      }

      return {
        "type": "completion-query",
        "id": message.id,
        "source": name,
        "range": rangeToJSON(range),
        "completions": completions == null ? null : completions.map<dynamic>(symbol => ({
          "name": symbol.name,
          "kind": symbol.kind.toString,
          "type": IDE.completionType(symbol),
          "comments": symbol.comments == null ? null : symbol.comments.map<string>(comment => "\n".join(comment.lines)),
        })),
      }
    }

    var handleSignatureQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var line int = message.line | 0
      var column int = message.column | 0
      var signature string = null
      var arguments List<string> = null
      var argumentIndex = -1

      if inputs != null {
        for source in inputs {
          if source.name == name {
            var index = source.lineColumnToIndex(line, column)
            if index != -1 && result != null && result.global != null {
              var query = IDE.SignatureQuery.new(source, index)
              query.run(result.global)
              if query.signature != null {
                signature = query.signatureString
                arguments = query.argumentStrings
                argumentIndex = query.argumentIndex
              }
            }
            break
          }
        }
      }

      return {
        "type": "signature-query",
        "id": message.id,
        "source": name,
        "signature": signature,
        "arguments": arguments,
        "argumentIndex": argumentIndex,
      }
    }

    var handleMessage = (message dynamic) dynamic => {
      switch message.type {
        case "compile" { return handleCompile(message) }
        case "tooltip-query" { return handleTooltipQuery(message) }
        case "definition-query" { return handleDefinitionQuery(message) }
        case "symbols-query" { return handleSymbolsQuery(message) }
        case "rename-query" { return handleRenameQuery(message) }
        case "completion-query" { return handleCompletionQuery(message) }
        case "signature-query" { return handleSignatureQuery(message) }
        default { throw dynamic.Error.new("Unexpected message type '\(message.type)'") }
      }
    }

    return {
      "compile": handleCompile,
      "tooltipQuery": handleTooltipQuery,
      "definitionQuery": handleDefinitionQuery,
      "symbolsQuery": handleSymbolsQuery,
      "renameQuery": handleRenameQuery,
      "completionQuery": handleCompletionQuery,
      "signatureQuery": handleSignatureQuery,
      "message": handleMessage,
    }
  }

  @entry if BUILD == .API
  def apiMain {
    # JavaScript API
    var this = (=> dynamic.this)()
    var api = dynamic.typeof(dynamic.exports) != "undefined" ? dynamic.exports : this.Skew ? this.Skew : this.Skew = {}
    api.VERSION = VERSION
    api.create = createCompilerInstance

    # Web Worker API (only installed if no other code in the worker sets "Skew.handleWorkerMessages" to false first)
    if dynamic.typeof(dynamic.WorkerGlobalScope) != "undefined" && this is dynamic.WorkerGlobalScope && api.handleWorkerMessages != true {
      var instance = createCompilerInstance()
      dynamic.onmessage = (event dynamic) => {
        dynamic.postMessage(instance.message(event.data))
      }
    }
  }
}
