namespace Skew {
  enum Option {
    DEFINE
    FIX_ALL
    FOLD_CONSTANTS
    GC_STRATEGY
    GLOBALIZE_FUNCTIONS
    HELP
    IGNORED_COMMENT_WARNING
    INLINE_FUNCTIONS
    JS_MANGLE
    JS_MINIFY
    JS_SOURCE_MAP
    MESSAGE_LIMIT
    NO_OUTPUT
    OUTPUT_DIRECTORY
    OUTPUT_FILE
    RELEASE
    TARGET
    VERBOSE
    VERSION
    WARNINGS_ARE_ERRORS
  }

  const DEFAULT_MESSAGE_LIMIT = 10

  @entry if BUILD == .SKEWC
  def skewcMain(arguments List<string>) int {
    var log = Log.new
    var diagnosticLimit = 0
    var printDiagnostic = (diagnostic Diagnostic) => {
      var terminalWidth = Terminal.width
      if diagnosticLimit > 0 && log.diagnostics.count >= diagnosticLimit {
        return
      }
      if diagnostic.range != null {
        printWithColor(.BOLD, diagnostic.range.locationString + ": ")
      }
      switch diagnostic.kind {
        case .WARNING { printWarning(diagnostic.text) }
        case .ERROR { printError(diagnostic.text) }
      }
      if diagnostic.range != null {
        var formatted = diagnostic.range.format(terminalWidth)
        Terminal.print(formatted.line)
        printWithColor(.GREEN, formatted.range + "\n")
      }
      if diagnostic.noteRange != null {
        var formatted = diagnostic.noteRange.format(terminalWidth)
        printWithColor(.BOLD, diagnostic.noteRange.locationString + ": ")
        printNote(diagnostic.noteText)
        Terminal.print(formatted.line)
        printWithColor(.GREEN, formatted.range + "\n")
      }
    }

    # Print diagnostics immediately when generated to improve perceived speed
    log.appendCallback = printDiagnostic

    # Translate frontend flags to compiler options
    var parser = Options.Parser.new
    var options = parseOptions(log, parser, arguments)
    diagnosticLimit = parser.intForOption(.MESSAGE_LIMIT, DEFAULT_MESSAGE_LIMIT)
    var fixAll = parser.boolForOption(.FIX_ALL, false)
    var fixCount = 0

    # Optionally have the log transform warnings into errors
    if options != null {
      log.warningsAreErrors = options.warningsAreErrors
    }

    # Suppress logging during fixes
    if fixAll {
      log = Log.new
    }

    # Iterate until fixed point when applying fixes
    while true {
      var inputs List<Source> = []
      var inputRanges List<Range> = []
      readSources(log, parser.normalArguments, inputs, inputRanges)

      # Run the compilation
      if !log.hasErrors && options != null {
        var result = compile(log, options, inputs)

        # Write all outputs
        if !log.hasErrors {
          for output in result.outputs {
            if output.name != null && !IO.writeFile(output.name, output.contents) {
              var outputFile = parser.rangeForOption(.OUTPUT_FILE)
              var outputDirectory = parser.rangeForOption(.OUTPUT_DIRECTORY)
              log.commandLineErrorUnwritableFile(outputFile ?? outputDirectory, output.name)
              break
            }
          }

          # Print compilation statistics
          if !log.hasErrors {
            printWithColor(.GRAY, result.statistics(inputs, options.verbose ? .LONG : .SHORT) + "\n")
          }
        }
      }

      if !fixAll {
        break
      }

      # Attempt to automatically fix warnings and errors
      var applyLog = Log.new
      var count = applyFixes(log, applyLog, source => {
        for i in 0..inputs.count {
          if source.name == inputs[i].name {
            return inputRanges[i]
          }
        }
        return parser.rangeForOption(.FIX_ALL)
      })

      fixCount += count
      log = applyLog

      if count == 0 || applyLog.hasErrors {
        break
      }
    }

    # Print diagnostics afterward when applying fixes since they aren't printed earlier
    if fixAll {
      for diagnostic in log.diagnostics {
        printDiagnostic(diagnostic)
      }
      Terminal.print("\(fixCount) \(fixCount == 1 ? "fix" : "fixes") applied")
    }

    # Print any errors and warnings
    printLogSummary(log, diagnosticLimit)

    # Optionally report a failure if any warnings were found
    if options != null && options.warningsAreErrors {
      return log.hasErrors || log.hasWarnings ? 1 : 0
    } else {
      return log.hasErrors ? 1 : 0
    }
  }

  def printWithColor(color Terminal.Color, text string) {
    Terminal.setColor(color)
    Terminal.write(text)
    Terminal.setColor(.DEFAULT)
  }

  def printError(text string) {
    printWithColor(.RED, "error: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printNote(text string) {
    printWithColor(.GRAY, "note: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printWarning(text string) {
    printWithColor(.MAGENTA, "warning: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printUsage(parser Options.Parser) {
    printWithColor(.GREEN, "\nusage: ")
    printWithColor(.BOLD, "skewc [flags] [inputs]\n")
    Terminal.write(parser.usageText(Math.min(Terminal.width, 80)))
  }

  def printLogSummary(log Log, diagnosticLimit int) {
    var hasErrors = log.hasErrors
    var hasWarnings = log.hasWarnings
    var summary = ""
    if hasWarnings {
      summary += PrettyPrint.plural(log.warningCount, "warning")
      if hasErrors {
        summary += " and "
      }
    }
    if hasErrors {
      summary += PrettyPrint.plural(log.errorCount, "error")
    }
    if hasWarnings || hasErrors {
      Terminal.write(summary + " generated")
      if log.wasWarningCount > 0 {
        Terminal.write(" (warnings are being treated as errors due to \"--warnings-are-errors\")")
      }
      if diagnosticLimit > 0 && log.diagnostics.count > diagnosticLimit {
        printWithColor(.GRAY, " (only showing \(PrettyPrint.plural(diagnosticLimit, "message")), use \"--message-limit=0\" to see all)")
      }
      Terminal.write("\n")
    }
  }

  def readSources(log Log, normalArguments List<Range>, inputs List<Source>, inputRanges List<Range>) {
    var visit fn(Range, string, bool)

    visit = (range, path, isExplicit) => {
      if splitPath(path).entry.startsWith(".") {
        return
      }

      # Directories
      if IO.isDirectory(path) {
        var entries = IO.readDirectory(path)
        if entries == null {
          log.commandLineErrorUnreadableFile(range, path)
        }
        for entry in entries {
          if !entry.startsWith(".") {
            visit(range, path + "/" + entry, false)
          }
        }
      }

      # Files (ignore non-skew files that aren't explicitly specified)
      else if isExplicit || path.endsWith(".sk") {
        var contents = IO.readFile(path)
        if contents == null {
          log.commandLineErrorUnreadableFile(range, path)
        } else {
          inputs.append(Source.new(path, contents))
          inputRanges.append(range)
        }
      }
    }

    # Recursively visit input directories
    for range in normalArguments {
      visit(range, range.toString, true)
    }
  }

  def parseOptions(log Log, parser Options.Parser, arguments List<string>) CompilerOptions {
    # Configure the parser
    parser.define(.BOOL, .HELP, "--help", "Prints this message.").aliases(["-help", "?", "-?", "-h", "-H", "/?", "/h", "/H"])
    parser.define(.STRING, .TARGET, "--target", "Sets the target format. Valid targets are \(joinKeys(VALID_TARGETS.keys)).")
    parser.define(.STRING, .OUTPUT_FILE, "--output-file", "Combines all output into a single file. Mutually exclusive with --output-dir.")
    parser.define(.STRING, .OUTPUT_DIRECTORY, "--output-dir", "Places all output files in the specified directory. Mutually exclusive with --output-file.")
    parser.define(.BOOL, .NO_OUTPUT, "--no-output", "Stops after the type checking pass and does not generate any output.")
    parser.define(.BOOL, .RELEASE, "--release", "Implies --js-mangle, --js-minify, --fold-constants, --inline-functions, --globalize-functions, and --define:RELEASE=true.")
    parser.define(.BOOL, .VERBOSE, "--verbose", "Prints out information about the compilation.")
    parser.define(.BOOL, .VERSION, "--version", "Prints the current compiler version (\(VERSION)) and exits.")
    parser.define(.INT, .MESSAGE_LIMIT, "--message-limit", "Sets the maximum number of messages to report. " +
      "Pass 0 to disable the message limit. The default is \(DEFAULT_MESSAGE_LIMIT).")
    parser.define(.STRING_LIST, .DEFINE, "--define", "Override variable values at compile time.")
    parser.define(.BOOL, .JS_MANGLE, "--js-mangle", "Transforms emitted JavaScript to be as small as possible. The \"@export\" annotation prevents renaming a symbol.")
    parser.define(.BOOL, .JS_MINIFY, "--js-minify", "Remove whitespace when compiling to JavaScript.")
    parser.define(.BOOL, .JS_SOURCE_MAP, "--js-source-map", "Generates a source map when targeting JavaScript. " +
      "The source map is saved with the \".map\" extension in the same directory as the main output file.")
    parser.define(.BOOL, .FOLD_CONSTANTS, "--fold-constants", "Evaluates constants at compile time and removes dead code inside functions.")
    parser.define(.BOOL, .INLINE_FUNCTIONS, "--inline-functions", "Uses heuristics to automatically inline simple global functions.")
    parser.define(.BOOL, .GLOBALIZE_FUNCTIONS, "--globalize-functions", "Convert instance functions to global functions for better inlining.")
    parser.define(.BOOL, .FIX_ALL, "--fix-all", "Attempt to automatically fix as many errors and warnings as possible. " +
      "THIS WILL WRITE OVER YOUR SOURCE CODE. Make sure you know what you're doing.")
    parser.define(.BOOL, .IGNORED_COMMENT_WARNING, "--ignored-comment-warning", "Warn when the compiler doesn't store a comment in the parse tree.")
    parser.define(.BOOL, .WARNINGS_ARE_ERRORS, "--warnings-are-errors", "Turns warnings into errors.")

    # Parse the command line arguments
    parser.parse(log, arguments)
    if log.hasErrors {
      return null
    }

    # Early-out when printing the usage text
    if parser.boolForOption(.HELP, arguments.isEmpty) {
      printUsage(parser)
      return null
    }

    # Early-out when printing the version
    if parser.boolForOption(.VERSION, false) {
      Terminal.print(VERSION)
      return null
    }

    # Set up the options for the compiler
    var options = CompilerOptions.new
    var releaseFlag = parser.boolForOption(.RELEASE, false)
    options.foldAllConstants = parser.boolForOption(.FOLD_CONSTANTS, releaseFlag)
    options.globalizeAllFunctions = parser.boolForOption(.GLOBALIZE_FUNCTIONS, releaseFlag)
    options.inlineAllFunctions = parser.boolForOption(.INLINE_FUNCTIONS, releaseFlag)
    options.jsMangle = parser.boolForOption(.JS_MANGLE, releaseFlag)
    options.jsMinify = parser.boolForOption(.JS_MINIFY, releaseFlag)
    options.jsSourceMap = parser.boolForOption(.JS_SOURCE_MAP, false)
    options.stopAfterResolve = parser.boolForOption(.NO_OUTPUT, false)
    options.verbose = parser.boolForOption(.VERBOSE, false)
    options.warnAboutIgnoredComments = parser.boolForOption(.IGNORED_COMMENT_WARNING, false)
    options.warningsAreErrors = parser.boolForOption(.WARNINGS_ARE_ERRORS, false)

    # Prepare the defines
    if releaseFlag {
      options.define("RELEASE", "true")
    }
    for range in parser.rangeListForOption(.DEFINE) {
      var name = range.toString
      var equals = name.indexOf("=")
      if equals < 0 {
        log.commandLineErrorExpectedDefineValue(range, name)
        continue
      }
      options.defines[name.slice(0, equals)] = Define.new(range.fromStart(equals), range.fromEnd(name.count - equals - 1))
    }

    # There must be at least one source file
    var end = parser.source.contents.count
    var trailingSpace = Range.new(parser.source, end - 1, end)
    if parser.normalArguments.isEmpty && !options.stopAfterResolve {
      log.commandLineErrorNoInputFiles(trailingSpace)
    }

    # Parse the output location
    if !options.stopAfterResolve {
      var outputFile = parser.rangeForOption(.OUTPUT_FILE)
      var outputDirectory = parser.rangeForOption(.OUTPUT_DIRECTORY)
      if outputFile == null && outputDirectory == null {
        log.commandLineErrorMissingOutput(trailingSpace, "--output-file", "--output-dir")
      } else if outputFile != null && outputDirectory != null {
        log.commandLineErrorDuplicateOutput(outputFile.start > outputDirectory.start ? outputFile : outputDirectory, "--output-file", "--output-dir")
      } else if outputFile != null {
        options.outputFile = outputFile.toString
      } else {
        options.outputDirectory = outputDirectory.toString
      }
    }

    # Check the target format
    var target = parser.rangeForOption(.TARGET)
    if target != null {
      options.target = parseEnum<CompilerTarget>(log, "target", VALID_TARGETS, target, null)
    } else if !options.createTargetFromExtension {
      log.commandLineErrorMissingTarget(trailingSpace)
    }

    return options
  }

  def applyFixes(log Log, applyLog Log, rangeForSource fn(Source) Range) int {
    var fixCount = 0

    # Collect diagnostics by source file
    var map StringMap<List<Diagnostic>> = {}
    for diagnostic in log.diagnostics {
      if diagnostic.range != null && diagnostic.fixes != null && diagnostic.fixes.count == 1 {
        var name = diagnostic.range.source.name
        var diagnostics = map.get(name, null)
        if diagnostics == null {
          map[name] = diagnostics = []
        }
        diagnostics.append(diagnostic)
      }
    }

    # Apply for each source file
    for diagnostics in map.values {
      var source = diagnostics.first.range.source
      var contents = source.contents
      diagnostics.sort((a, b) => b.range.start <=> a.range.start)

      # Apply fixes in reverse to avoid issues with changing offsets
      var last = contents.count
      for i in 0..diagnostics.count {
        var fix = diagnostics[i].fixes.first

        # Typo correction isn't robust enough right now to fix automatically
        if fix.kind == .SYMBOL_TYPO || fix.range.end > last {
          continue
        }
        contents = contents.slice(0, fix.range.start) + fix.replacement + contents.slice(fix.range.end)
        last = fix.range.start
        fixCount++
      }

      # Write over the source file in place
      if !IO.writeFile(source.name, contents) {
        applyLog.commandLineErrorUnwritableFile(rangeForSource(source), source.name)
      }
    }

    return fixCount
  }

  class Log {
    def commandLineErrorExpectedDefineValue(range Range, name string) {
      append(newError(range, "Use \"--define:\(name)=___\" to provide a value"))
    }

    def commandLineErrorMissingOutput(range Range, first string, second string) {
      append(newError(range, "Specify the output location using either \"\(first)\" or \"\(second)\""))
    }

    def commandLineErrorDuplicateOutput(range Range, first string, second string) {
      append(newError(range, "Cannot specify both \"\(first)\" and \"\(second)\""))
    }

    def commandLineErrorUnreadableFile(range Range, name string) {
      append(newError(range, "Could not read from \"\(name)\""))
    }

    def commandLineErrorUnwritableFile(range Range, name string) {
      append(newError(range, "Could not write to \"\(name)\""))
    }

    def commandLineErrorNoInputFiles(range Range) {
      append(newError(range, "Missing input files"))
    }

    def commandLineErrorMissingTarget(range Range) {
      append(newError(range, "Specify the target format using \"--target\""))
    }

    def commandLineErrorInvalidEnum(range Range, name string, found string, expected List<string>) {
      append(newError(range, "Invalid \(name) \"\(found)\", must be either \(PrettyPrint.joinQuoted(expected, "or"))"))
    }
  }

  def joinKeys(keys List<string>) string {
    keys.sort(SORT_STRINGS)
    return PrettyPrint.joinQuoted(keys, "and")
  }

  def parseEnum<T>(log Log, name string, map StringMap<T>, range Range, defaultValue T) T {
    if range != null {
      var key = range.toString
      if key in map {
        return map[key]
      }
      var keys = map.keys
      keys.sort(SORT_STRINGS) # Sort so the order is deterministic
      log.commandLineErrorInvalidEnum(range, name, key, keys)
    }
    return defaultValue
  }

  const VALID_TARGETS = {
    "cpp": CPlusPlusTarget.new,
    "cs": CSharpTarget.new,
    "ts": TypeScriptTarget.new,
    "js": JavaScriptTarget.new,
    "lisp-tree": LispTreeTarget.new,
  }
}
