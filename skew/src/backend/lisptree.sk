namespace Skew {
  class LispTreeTarget : CompilerTarget {
    over name string { return "S-expression" }
    over extension string { return "lisp" }
    over createEmitter(context PassContext) Emitter { return LispTreeEmitter.new(context.options) }
  }

  class LispTreeEmitter : Emitter {
    const _options CompilerOptions

    over visit(global ObjectSymbol) {
      _visitObject(global)
      _emit("\n")
      _createSource(_options.outputDirectory != null ? _options.outputDirectory + "/compiled.lisp" : _options.outputFile, .ALWAYS_EMIT)
    }

    def _visitObject(symbol ObjectSymbol) {
      _emit("(" + _mangleKind(symbol.kind.toString) + " " + quoteString(symbol.name, .DOUBLE, .OCTAL_WORKAROUND))
      _increaseIndent

      for object in symbol.objects {
        _emit("\n" + _indent)
        _visitObject(object)
      }

      for function in symbol.functions {
        _emit("\n" + _indent)
        _visitFunction(function)
      }

      for variable in symbol.variables {
        _emit("\n" + _indent)
        _visitVariable(variable)
      }

      _decreaseIndent
      _emit(")")
    }

    def _visitFunction(symbol FunctionSymbol) {
      _emit("(" + _mangleKind(symbol.kind.toString) + " " + quoteString(symbol.name, .DOUBLE, .OCTAL_WORKAROUND))
      _increaseIndent

      for argument in symbol.arguments {
        _emit("\n" + _indent)
        _visitVariable(argument)
      }

      _emit("\n" + _indent)
      _visitNode(symbol.returnType)
      _emit("\n" + _indent)
      _visitNode(symbol.block)
      _decreaseIndent
      _emit(")")
    }

    def _visitVariable(symbol VariableSymbol) {
      _emit("(" + _mangleKind(symbol.kind.toString) + " " + quoteString(symbol.name, .DOUBLE, .OCTAL_WORKAROUND) + " ")
      _visitNode(symbol.type)
      _emit(" ")
      _visitNode(symbol.value)
      _emit(")")
    }

    def _visitNode(node Node) {
      if node == null {
        _emit("nil")
        return
      }

      _emit("(" + _mangleKind(node.kind.toString))

      var content = node.content
      if content != null {
        switch content.kind {
          case .INT { _emit(" " + content.asInt.toString) }
          case .BOOL { _emit(" " + content.asBool.toString) }
          case .DOUBLE { _emit(" " + content.asDouble.toString) }
          case .STRING { _emit(" " + quoteString(content.asString, .DOUBLE, .OCTAL_WORKAROUND)) }
        }
      }

      if node.kind == .VARIABLE {
        _emit(" ")
        _visitVariable(node.symbol.asVariableSymbol)
      }

      else if node.kind == .LAMBDA {
        _emit(" ")
        _visitFunction(node.symbol.asFunctionSymbol)
      }

      else if node.hasChildren {
        _increaseIndent
        for child = node.firstChild; child != null; child = child.nextSibling {
          _emit("\n" + _indent)
          _visitNode(child)
        }
        _decreaseIndent
      }

      _emit(")")
    }

    def _mangleKind(kind string) string {
      return kind.toLowerCase.replaceAll("_", "-")
    }
  }

  # These dump() functions are helpful for debugging syntax trees
  namespace LispTreeEmitter {
    def dump(global ObjectSymbol) string {
      var emitter = LispTreeEmitter.new(CompilerOptions.new)
      emitter.visit(global)
      emitter._createSource(null, .ALWAYS_EMIT)
      return emitter.sources.first.contents
    }

    def dump(node Node) string {
      var emitter = LispTreeEmitter.new(CompilerOptions.new)
      emitter._visitNode(node)
      emitter._createSource(null, .ALWAYS_EMIT)
      return emitter.sources.first.contents
    }
  }
}
