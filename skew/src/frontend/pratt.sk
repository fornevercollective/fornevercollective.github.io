namespace Skew {
  # The same operator precedence as C for the most part
  enum Precedence {
    LOWEST
    COMMA
    ASSIGN
    NULL_JOIN
    LOGICAL_OR
    LOGICAL_AND
    BITWISE_OR
    BITWISE_XOR
    BITWISE_AND
    EQUAL
    COMPARE
    SHIFT
    ADD
    MULTIPLY
    UNARY_PREFIX
    UNARY_POSTFIX
    MEMBER
  }

  class ParserContext {
    var log Log
    var inNonVoidFunction = false
    var _tokens List<Token>
    var _index = 0
    const warnAboutIgnoredComments bool

    # Keep track of the previous syntax error so only one syntax error is emitted
    # per token when recovering from a parse error. For example:
    #
    #   int x = (1 + (2 +
    #
    # In the code above, the only syntax error should be about an unexpected
    # end of file and not also about the two missing right parentheses.
    var _previousSyntaxError = -1

    def current Token {
      return _tokens[_index]
    }

    def stealComments List<Comment> {
      var token = current
      var comments = token.comments
      token.comments = null
      return comments
    }

    def next Token {
      var token = current
      if warnAboutIgnoredComments && token.comments != null {
        log.syntaxWarningIgnoredCommentInParser(token.comments.first.range)
      }
      if _index + 1 < _tokens.count {
        _index++
      }
      return token
    }

    def spanSince(range Range) Range {
      var previous = _tokens[_index > 0 ? _index - 1 : 0]
      return previous.range.end < range.start ? range : Range.span(range, previous.range)
    }

    def peek(kind TokenKind) bool {
      return current.kind == kind
    }

    def peek(kind TokenKind, skip int) bool {
      assert(skip >= 1)
      return _tokens[Math.min(_index + skip, _tokens.count - 1)].kind == kind
    }

    def eat(kind TokenKind) bool {
      if peek(kind) {
        next
        return true
      }
      return false
    }

    def skipWhitespace {
      eat(.NEWLINE)
    }

    def skipSemicolon bool {
      if peek(.SEMICOLON) {
        expect(.NEWLINE)
        next
        return true
      }
      return false
    }

    def undo {
      assert(_index > 0)
      _index--
    }

    def expect(kind TokenKind) bool {
      if !eat(kind) {
        if canReportSyntaxError {
          log.syntaxErrorExpectedToken(current.range, current.kind, kind)
        }
        return false
      }
      return true
    }

    def unexpectedToken {
      if canReportSyntaxError {
        log.syntaxErrorUnexpectedToken(current)
      }
    }

    def createParseError Node {
      return Node.createParseError.withRange(current.range)
    }

    def canReportSyntaxError bool {
      if _previousSyntaxError != _index {
        _previousSyntaxError = _index
        return true
      }
      return false
    }
  }

  class Parselet {
    var precedence Precedence
    var prefix fn(ParserContext) Node = null
    var infix fn(ParserContext, Node) Node = null
  }

  # A Pratt parser is a parser that associates up to two operations per token,
  # each with its own precedence. Pratt parsers excel at parsing expression
  # trees with deeply nested precedence levels. For an excellent writeup, see:
  #
  #   http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/
  #
  class Pratt {
    var _table = IntMap<Parselet>.new

    def parselet(kind TokenKind, precedence Precedence) Parselet {
      var parselet = _table.get(kind, null)
      if parselet == null {
        var created = Parselet.new(precedence)
        parselet = created
        _table[kind] = created
      } else if precedence > parselet.precedence {
        parselet.precedence = precedence
      }
      return parselet
    }

    def parse(context ParserContext, precedence Precedence) Node {
      context.skipWhitespace
      var comments = context.stealComments
      var token = context.current
      var parselet = _table.get(token.kind, null)
      if parselet == null || parselet.prefix == null {
        context.unexpectedToken
        return context.createParseError
      }
      var node = resume(context, precedence, parselet.prefix(context))
      assert(node != null && node.range != null) # Parselets must set the range of every node
      node.comments = Comment.concat(comments, node.comments)
      return node
    }

    def resume(context ParserContext, precedence Precedence, left Node) Node {
      while true {
        var kind = context.current.kind
        var parselet = _table.get(kind, null)
        if parselet == null || parselet.infix == null || parselet.precedence <= precedence {
          break
        }
        left = parselet.infix(context, left)
        assert(left != null && left.range != null) # Parselets must set the range of every node
      }
      return left
    }

    def literal(kind TokenKind, callback fn(ParserContext, Token) Node) {
      parselet(kind, .LOWEST).prefix = context => callback(context, context.next)
    }

    def prefix(kind TokenKind, precedence Precedence, callback fn(ParserContext, Token, Node) Node) {
      parselet(kind, .LOWEST).prefix = context => {
        var token = context.next
        return callback(context, token, parse(context, precedence))
      }
    }

    def postfix(kind TokenKind, precedence Precedence, callback fn(ParserContext, Node, Token) Node) {
      parselet(kind, precedence).infix = (context, left) => callback(context, left, context.next)
    }

    def infix(kind TokenKind, precedence Precedence, callback fn(ParserContext, Node, Token, Node) Node) {
      parselet(kind, precedence).infix = (context, left) => {
        var token = context.next
        var comments = context.stealComments
        var right = parse(context, precedence)
        right.comments = Comment.concat(comments, right.comments)
        return callback(context, left, token, right)
      }
    }

    def infixRight(kind TokenKind, precedence Precedence, callback fn(ParserContext, Node, Token, Node) Node) {
      parselet(kind, precedence).infix = (context, left) => {
        var token = context.next
        return callback(context, left, token, parse(context, (precedence as int - 1) as Precedence)) # Subtract 1 for right-associativity
      }
    }
  }
}
