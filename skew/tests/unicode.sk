namespace Skew.Tests {
  def testUnicodeText(text string, codePoints List<int>) {
    test("codePoints " + text, expectString => expectString(toString(codePoints), toString(text.codePoints)))
    test("fromCodePoints " + text, expectString => expectString(text, string.fromCodePoints(codePoints)))
    test("codeUnits " + text, expectString => expectString(text, string.fromCodeUnits(text.codeUnits)))

    # Call fromCodePoint() for each code point
    for codePoint in codePoints {
      test("fromCodePoint " + codePoint.toString, expectString =>
        expectString(toString([codePoint]), toString(string.fromCodePoint(codePoint).codePoints)))
    }

    # Check forward iteration
    var nextCodePoints = codePoints.clone
    nextCodePoints.append(-1)
    testExpect("StringIterator.nextCodePoint " + text, () List<int> => {
      var iterator = Unicode.StringIterator.INSTANCE.reset(text, 0)
      var observedCodePoints List<int> = []
      for codePoint in 0..codePoints.count + 1 {
        observedCodePoints.append(iterator.nextCodePoint)
      }
      return observedCodePoints
    }, nextCodePoints)

    # Check backward iteration
    var previousCodePoints = codePoints.clone
    previousCodePoints.reverse
    previousCodePoints.append(-1)
    testExpect("StringIterator.previousCodePoint " + text, () List<int> => {
      var iterator = Unicode.StringIterator.INSTANCE.reset(text, text.count)
      var observedCodePoints List<int> = []
      for codePoint in 0..codePoints.count + 1 {
        observedCodePoints.append(iterator.previousCodePoint)
      }
      return observedCodePoints
    }, previousCodePoints)
  }

  def testUnicodeCount(text string, count int) {
    test("count " + text, expectString => expectString(count.toString, text.count.toString))
  }

  def testUnicode {
    # Make sure encoding and decoding works
    testUnicodeText("Цлїςσδε", [1062, 1083, 1111, 962, 963, 948, 949])
    testUnicodeText("ﾌﾑｱﾑｶﾓｹﾓ", [65420, 65425, 65393, 65425, 65398, 65427, 65401, 65427])
    testUnicodeText("フムヤムカモケモ", [12501, 12512, 12516, 12512, 12459, 12514, 12465, 12514])
    testUnicodeText("㊀㊁㊂㊃㊄", [12928, 12929, 12930, 12931, 12932])
    testUnicodeText("☳☶☲", [9779, 9782, 9778])
    testUnicodeText("𡇙𝌆", [135641, 119558])
    testUnicodeText("🙉🙈🙊", [128585, 128584, 128586])

    # Make sure target-specific constant folding of string.count works correctly
    testUnicodeCount("Цлїςσδε", "Цлїςσδε".count)
    testUnicodeCount("ﾌﾑｱﾑｶﾓｹﾓ", "ﾌﾑｱﾑｶﾓｹﾓ".count)
    testUnicodeCount("フムヤムカモケモ", "フムヤムカモケモ".count)
    testUnicodeCount("㊀㊁㊂㊃㊄", "㊀㊁㊂㊃㊄".count)
    testUnicodeCount("☳☶☲", "☳☶☲".count)
    testUnicodeCount("𡇙𝌆", "𡇙𝌆".count)
  }
}
