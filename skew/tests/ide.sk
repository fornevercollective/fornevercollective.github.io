namespace Skew.Tests {
  def testIDE {

# Tooltips: basic test of globals and formatting
testIDE("
def @annotation ( x int ) # Comment for annotation
def globalFunction ( x int ) bool { return false } # Comment for globalFunction
# Comment for globalVariable
var globalVariable = 0 # Comment 2 for globalVariable
", (ide, expect) => {
  expect("", ide.tooltipQuery(0, 3))
  expect("# Comment for annotation\ndef @annotation(x int)", ide.tooltipQuery(0, 4))
  expect("# Comment for annotation\ndef @annotation(x int)", ide.tooltipQuery(0, 15))
  expect("", ide.tooltipQuery(0, 16))

  expect("", ide.tooltipQuery(1, 3))
  expect("# Comment for globalFunction\ndef globalFunction(x int) bool", ide.tooltipQuery(1, 4))
  expect("# Comment for globalFunction\ndef globalFunction(x int) bool", ide.tooltipQuery(1, 18))
  expect("", ide.tooltipQuery(1, 19))

  expect("", ide.tooltipQuery(1, 20))
  expect("var x int", ide.tooltipQuery(1, 21))
  expect("var x int", ide.tooltipQuery(1, 22))
  expect("class int", ide.tooltipQuery(1, 23))
  expect("class int", ide.tooltipQuery(1, 26))
  expect("", ide.tooltipQuery(1, 27))

  expect("", ide.tooltipQuery(1, 28))
  expect("class bool", ide.tooltipQuery(1, 29))
  expect("class bool", ide.tooltipQuery(1, 33))
  expect("", ide.tooltipQuery(1, 34))

  expect("", ide.tooltipQuery(3, 3))
  expect("# Comment for globalVariable\n# Comment 2 for globalVariable\nvar globalVariable int", ide.tooltipQuery(3, 4))
  expect("# Comment for globalVariable\n# Comment 2 for globalVariable\nvar globalVariable int", ide.tooltipQuery(3, 18))
  expect("", ide.tooltipQuery(3, 19))
})

# Tooltips: test object types
testIDE("
class Derived : Base :: I {
  const foo Foo = .FOO # Comment for foo
  over instanceFunction {}
}

class Base {
  def instanceFunction {}
}

interface I {
}

enum Foo {
  FOO # Comment for FOO
}
", (ide, expect) => {
  expect("", ide.tooltipQuery(0, 5))
  expect("class Derived : Base :: I", ide.tooltipQuery(0, 6))
  expect("class Derived : Base :: I", ide.tooltipQuery(0, 13))
  expect("", ide.tooltipQuery(0, 14))

  expect("", ide.tooltipQuery(0, 15))
  expect("class Base", ide.tooltipQuery(0, 16))
  expect("class Base", ide.tooltipQuery(0, 20))
  expect("", ide.tooltipQuery(0, 21))

  expect("", ide.tooltipQuery(0, 23))
  expect("interface I", ide.tooltipQuery(0, 24))
  expect("interface I", ide.tooltipQuery(0, 25))
  expect("", ide.tooltipQuery(0, 26))

  expect("", ide.tooltipQuery(1, 7))
  expect("# Comment for foo\nconst foo Foo", ide.tooltipQuery(1, 8))
  expect("# Comment for foo\nconst foo Foo", ide.tooltipQuery(1, 11))
  expect("enum Foo", ide.tooltipQuery(1, 12))
  expect("enum Foo", ide.tooltipQuery(1, 15))
  expect("", ide.tooltipQuery(1, 16))

  expect("", ide.tooltipQuery(1, 18))
  expect("# Comment for FOO\nconst FOO Foo = 0", ide.tooltipQuery(1, 19))
  expect("# Comment for FOO\nconst FOO Foo = 0", ide.tooltipQuery(1, 22))
  expect("", ide.tooltipQuery(1, 23))

  expect("", ide.tooltipQuery(2, 6))
  expect("over instanceFunction", ide.tooltipQuery(2, 7))
  expect("over instanceFunction", ide.tooltipQuery(2, 23))
  expect("", ide.tooltipQuery(2, 24))

  expect("", ide.tooltipQuery(6, 5))
  expect("def instanceFunction", ide.tooltipQuery(6, 6))
  expect("def instanceFunction", ide.tooltipQuery(6, 22))
  expect("", ide.tooltipQuery(6, 23))

  expect("", ide.tooltipQuery(13, 1))
  expect("# Comment for FOO\nconst FOO Foo = 0", ide.tooltipQuery(13, 2))
  expect("# Comment for FOO\nconst FOO Foo = 0", ide.tooltipQuery(13, 5))
  expect("", ide.tooltipQuery(13, 6))
})

# Tooltips: test flags
testIDE("
flags Flags {
  FOO # FOO
}

var f Flags = .FOO | .FOO # f
", (ide, expect) => {
  expect("", ide.tooltipQuery(0, 5))
  expect("flags Flags", ide.tooltipQuery(0, 6))
  expect("flags Flags", ide.tooltipQuery(0, 11))
  expect("", ide.tooltipQuery(0, 12))

  expect("", ide.tooltipQuery(1, 1))
  expect("# FOO\nconst FOO Flags = 1", ide.tooltipQuery(1, 2))
  expect("# FOO\nconst FOO Flags = 1", ide.tooltipQuery(1, 5))
  expect("", ide.tooltipQuery(1, 6))

  expect("", ide.tooltipQuery(4, 3))
  expect("# f\nvar f Flags", ide.tooltipQuery(4, 4))
  expect("# f\nvar f Flags", ide.tooltipQuery(4, 5))
  expect("flags Flags", ide.tooltipQuery(4, 6))
  expect("flags Flags", ide.tooltipQuery(4, 11))
  expect("", ide.tooltipQuery(4, 12))

  expect("", ide.tooltipQuery(4, 14))
  expect("# FOO\nconst FOO Flags = 1", ide.tooltipQuery(4, 15))
  expect("# FOO\nconst FOO Flags = 1", ide.tooltipQuery(4, 18))
  expect("def |(x int) int", ide.tooltipQuery(4, 19))
  expect("def |(x int) int", ide.tooltipQuery(4, 20))
  expect("", ide.tooltipQuery(4, 21))
  expect("# FOO\nconst FOO Flags = 1", ide.tooltipQuery(4, 22))
  expect("# FOO\nconst FOO Flags = 1", ide.tooltipQuery(4, 25))
  expect("", ide.tooltipQuery(4, 26))
})

# Tooltips: test generics
testIDE("
def test<X>(foo List<Foo<X>>, bar X) X {
  foo.append(null)
  return null in foo ? foo.first.bar : bar
}

class Foo<Y> {
  var bar Y
}
", (ide, expect) => {
  expect("", ide.tooltipQuery(0, 3))
  expect("def test<X>(foo List<Foo<X>>, bar X) X", ide.tooltipQuery(0, 4))
  expect("def test<X>(foo List<Foo<X>>, bar X) X", ide.tooltipQuery(0, 8))
  expect("X", ide.tooltipQuery(0, 9))
  expect("X", ide.tooltipQuery(0, 10))
  expect("", ide.tooltipQuery(0, 11))
  expect("var foo List<Foo<X>>", ide.tooltipQuery(0, 12))
  expect("var foo List<Foo<X>>", ide.tooltipQuery(0, 15))
  expect("class List<T>", ide.tooltipQuery(0, 16))
  expect("class List<T>", ide.tooltipQuery(0, 20))
  expect("class Foo<Y>", ide.tooltipQuery(0, 21))
  expect("class Foo<Y>", ide.tooltipQuery(0, 24))
  expect("X", ide.tooltipQuery(0, 25))
  expect("X", ide.tooltipQuery(0, 26))
  expect("", ide.tooltipQuery(0, 27))

  expect("", ide.tooltipQuery(1, 1))
  expect("var foo List<Foo<X>>", ide.tooltipQuery(1, 2))
  expect("var foo List<Foo<X>>", ide.tooltipQuery(1, 5))
  expect("def append(x Foo<X>)", ide.tooltipQuery(1, 6))
  expect("def append(x Foo<X>)", ide.tooltipQuery(1, 12))
  expect("", ide.tooltipQuery(1, 13))

  expect("", ide.tooltipQuery(2, 13))
  expect("def in(x T) bool", ide.tooltipQuery(2, 14))
  expect("def in(x T) bool", ide.tooltipQuery(2, 16))
  expect("var foo List<Foo<X>>", ide.tooltipQuery(2, 17))
  expect("var foo List<Foo<X>>", ide.tooltipQuery(2, 20))
  expect("", ide.tooltipQuery(2, 21))

  expect("", ide.tooltipQuery(2, 22))
  expect("var foo List<Foo<X>>", ide.tooltipQuery(2, 23))
  expect("var foo List<Foo<X>>", ide.tooltipQuery(2, 26))
  expect("def first Foo<X>", ide.tooltipQuery(2, 27))
  expect("def first Foo<X>", ide.tooltipQuery(2, 32))
  expect("var bar X", ide.tooltipQuery(2, 33))
  expect("var bar X", ide.tooltipQuery(2, 36))
  expect("", ide.tooltipQuery(2, 37))

  expect("", ide.tooltipQuery(5, 5))
  expect("class Foo<Y>", ide.tooltipQuery(5, 6))
  expect("class Foo<Y>", ide.tooltipQuery(5, 9))
  expect("Y", ide.tooltipQuery(5, 10))
  expect("Y", ide.tooltipQuery(5, 11))
  expect("", ide.tooltipQuery(5, 12))
})

# Tooltips: test wrapped types, casts, and self
testIDE("
type Foo : int {
  def foo Foo {
    return self as int as Foo #
  }
}
", (ide, expect) => {
  expect("", ide.tooltipQuery(0, 4))
  expect("type Foo = int", ide.tooltipQuery(0, 5))
  expect("type Foo = int", ide.tooltipQuery(0, 8))
  expect("", ide.tooltipQuery(0, 9))

  expect("", ide.tooltipQuery(0, 10))
  expect("class int", ide.tooltipQuery(0, 11))
  expect("class int", ide.tooltipQuery(0, 14))
  expect("", ide.tooltipQuery(0, 15))

  expect("", ide.tooltipQuery(1, 5))
  expect("def foo Foo", ide.tooltipQuery(1, 6))
  expect("def foo Foo", ide.tooltipQuery(1, 9))
  expect("type Foo = int", ide.tooltipQuery(1, 10))
  expect("type Foo = int", ide.tooltipQuery(1, 13))
  expect("", ide.tooltipQuery(1, 14))

  expect("", ide.tooltipQuery(2, 10))
  expect("const self Foo", ide.tooltipQuery(2, 11))
  expect("const self Foo", ide.tooltipQuery(2, 15))
  expect("", ide.tooltipQuery(2, 16))

  expect("", ide.tooltipQuery(2, 18))
  expect("class int", ide.tooltipQuery(2, 19))
  expect("class int", ide.tooltipQuery(2, 22))
  expect("", ide.tooltipQuery(2, 23))

  expect("", ide.tooltipQuery(2, 25))
  expect("type Foo = int", ide.tooltipQuery(2, 26))
  expect("type Foo = int", ide.tooltipQuery(2, 29))
  expect("", ide.tooltipQuery(2, 30))
})

# Tooltips: test function merging
testIDE("
def foo #
def foo {}
def bar {}
def bar #
", (ide, expect) => {
  expect("", ide.tooltipQuery(0, 3))
  expect("#\ndef foo", ide.tooltipQuery(0, 4))
  expect("#\ndef foo", ide.tooltipQuery(0, 7))
  expect("", ide.tooltipQuery(0, 8))

  expect("", ide.tooltipQuery(1, 3))
  expect("#\ndef foo", ide.tooltipQuery(1, 4))
  expect("#\ndef foo", ide.tooltipQuery(1, 7))
  expect("", ide.tooltipQuery(1, 8))

  expect("", ide.tooltipQuery(2, 3))
  expect("#\ndef bar", ide.tooltipQuery(2, 4))
  expect("#\ndef bar", ide.tooltipQuery(2, 7))
  expect("", ide.tooltipQuery(2, 8))

  expect("", ide.tooltipQuery(3, 3))
  expect("#\ndef bar", ide.tooltipQuery(3, 4))
  expect("#\ndef bar", ide.tooltipQuery(3, 7))
  expect("", ide.tooltipQuery(3, 8))
})

# Tooltips: test object merging
testIDE("
namespace Foo {}
class Foo {}
class Bar {}
namespace Bar {}
", (ide, expect) => {
  expect("", ide.tooltipQuery(0, 9))
  expect("class Foo", ide.tooltipQuery(0, 10))
  expect("class Foo", ide.tooltipQuery(0, 13))
  expect("", ide.tooltipQuery(0, 14))

  expect("", ide.tooltipQuery(1, 5))
  expect("class Foo", ide.tooltipQuery(1, 6))
  expect("class Foo", ide.tooltipQuery(1, 9))
  expect("", ide.tooltipQuery(1, 10))

  expect("", ide.tooltipQuery(2, 5))
  expect("class Bar", ide.tooltipQuery(2, 6))
  expect("class Bar", ide.tooltipQuery(2, 9))
  expect("", ide.tooltipQuery(2, 10))

  expect("", ide.tooltipQuery(3, 9))
  expect("class Bar", ide.tooltipQuery(3, 10))
  expect("class Bar", ide.tooltipQuery(3, 13))
  expect("", ide.tooltipQuery(3, 14))
})

# Tooltips: test rewriting operators
testIDE("
def test(foo Foo) {
  foo = foo?.bar ?? foo #
  foo = foo.bar?.bar ?? foo #
}

class Foo {
  var bar Foo
}
", (ide, expect) => {
  expect("", ide.tooltipQuery(1, 1))
  expect("var foo Foo", ide.tooltipQuery(1, 2))
  expect("var foo Foo", ide.tooltipQuery(1, 5))
  expect("", ide.tooltipQuery(1, 6))

  expect("", ide.tooltipQuery(1, 7))
  expect("var foo Foo", ide.tooltipQuery(1, 8))
  expect("var foo Foo", ide.tooltipQuery(1, 11))
  expect("", ide.tooltipQuery(1, 12))
  expect("var bar Foo", ide.tooltipQuery(1, 13))
  expect("var bar Foo", ide.tooltipQuery(1, 16))
  expect("", ide.tooltipQuery(1, 17))

  expect("", ide.tooltipQuery(1, 19))
  expect("var foo Foo", ide.tooltipQuery(1, 20))
  expect("var foo Foo", ide.tooltipQuery(1, 23))
  expect("", ide.tooltipQuery(1, 24))

  expect("", ide.tooltipQuery(2, 1))
  expect("var foo Foo", ide.tooltipQuery(2, 2))
  expect("var foo Foo", ide.tooltipQuery(2, 5))
  expect("", ide.tooltipQuery(2, 6))

  expect("", ide.tooltipQuery(2, 7))
  expect("var foo Foo", ide.tooltipQuery(2, 8))
  expect("var foo Foo", ide.tooltipQuery(2, 11))
  expect("var bar Foo", ide.tooltipQuery(2, 12))
  expect("var bar Foo", ide.tooltipQuery(2, 15))
  expect("", ide.tooltipQuery(2, 16))
  expect("var bar Foo", ide.tooltipQuery(2, 17))
  expect("var bar Foo", ide.tooltipQuery(2, 20))
  expect("", ide.tooltipQuery(2, 21))

  expect("", ide.tooltipQuery(2, 23))
  expect("var foo Foo", ide.tooltipQuery(2, 24))
  expect("var foo Foo", ide.tooltipQuery(2, 27))
  expect("", ide.tooltipQuery(2, 28))
})

# Tooltips: test string interpolation
testIDE("
def test string {
  return \"\\(test) + \\(test)\"
}
", (ide, expect) => {
  expect("", ide.tooltipQuery(1, 11))
  expect("def test string", ide.tooltipQuery(1, 12))
  expect("def test string", ide.tooltipQuery(1, 16))
  expect("", ide.tooltipQuery(1, 17))

  expect("", ide.tooltipQuery(1, 21))
  expect("def test string", ide.tooltipQuery(1, 22))
  expect("def test string", ide.tooltipQuery(1, 26))
  expect("", ide.tooltipQuery(1, 27))
})

# Tooltips: test XML literals
testIDE("
class Foo.Bar {
  var foo Foo.Bar = <Foo.Bar foo=null><Foo.Bar foo=null/></Foo.Bar>
  def <>...</>(x Foo.Bar) {}
}
", (ide, expect) => {
  expect("", ide.tooltipQuery(1, 5))
  expect("var foo Foo.Bar", ide.tooltipQuery(1, 6))
  expect("var foo Foo.Bar", ide.tooltipQuery(1, 9))
  expect("namespace Foo", ide.tooltipQuery(1, 10))
  expect("namespace Foo", ide.tooltipQuery(1, 13))
  expect("class Bar", ide.tooltipQuery(1, 14))
  expect("class Bar", ide.tooltipQuery(1, 17))
  expect("", ide.tooltipQuery(1, 18))

  expect("", ide.tooltipQuery(1, 20))
  expect("namespace Foo", ide.tooltipQuery(1, 21))
  expect("namespace Foo", ide.tooltipQuery(1, 24))
  expect("class Bar", ide.tooltipQuery(1, 25))
  expect("class Bar", ide.tooltipQuery(1, 28))
  expect("var foo Foo.Bar", ide.tooltipQuery(1, 29))
  expect("var foo Foo.Bar", ide.tooltipQuery(1, 32))
  expect("", ide.tooltipQuery(1, 33))

  expect("", ide.tooltipQuery(1, 38))
  expect("namespace Foo", ide.tooltipQuery(1, 39))
  expect("namespace Foo", ide.tooltipQuery(1, 42))
  expect("class Bar", ide.tooltipQuery(1, 43))
  expect("class Bar", ide.tooltipQuery(1, 46))
  expect("var foo Foo.Bar", ide.tooltipQuery(1, 47))
  expect("var foo Foo.Bar", ide.tooltipQuery(1, 50))
  expect("", ide.tooltipQuery(1, 51))

  expect("", ide.tooltipQuery(1, 58))
  expect("namespace Foo", ide.tooltipQuery(1, 59))
  expect("namespace Foo", ide.tooltipQuery(1, 62))
  expect("class Bar", ide.tooltipQuery(1, 63))
  expect("class Bar", ide.tooltipQuery(1, 66))
  expect("", ide.tooltipQuery(1, 67))
})

# Definitions: test object merging
testIDE("
namespace Foo {}
class Foo {}
class Bar {}
namespace Bar {}
def test(foo Foo, bar Bar) {}
", (ide, expect) => {
  expect("<stdin>:2:7", ide.definitionQuery(4, 13))
  expect("<stdin>:3:7", ide.definitionQuery(4, 22))
})

# Definitions: test function merging
testIDE("
def foo
def foo {}
def bar {}
def bar
def test {
  foo
  bar
}
", (ide, expect) => {
  expect("<stdin>:2:5", ide.definitionQuery(5, 2))
  expect("<stdin>:3:5", ide.definitionQuery(6, 2))
})

# Renaming: test function arguments
testIDE("
var x = 0
def foo(x int) {
  var y = x
  x += x
  var z = (x bool) => x ? y : -y
  z(x == y)
}
", (ide, expect) => {
  expect("<stdin>:2:9, <stdin>:3:11, <stdin>:4:3, <stdin>:4:8, <stdin>:6:5", ide.renameQuery(3, 2))
})

# Renaming: test local variables
testIDE("
var x = 0
def foo {
  var x = 0
  x += x
  var z = (x bool) => x ? 1 : -1
  z(x == 1)
}
", (ide, expect) => {
  expect("<stdin>:3:7, <stdin>:4:3, <stdin>:4:8, <stdin>:6:5", ide.renameQuery(3, 2))
})

# Renaming: test instance variables
testIDE("
var x = 0
class Foo {
  var x = 0
  def foo {
    x += x
    var z = (x bool) => x ? 1 : -1
    z(x == 1)
  }
}
", (ide, expect) => {
  expect("<stdin>:3:7, <stdin>:5:5, <stdin>:5:10, <stdin>:7:7", ide.renameQuery(4, 4))
})

# Renaming: test global variables
testIDE("
var x = 0
namespace Foo {
  var x = 0
  def foo {
    x += x
    var z = (x bool) => x ? 1 : -1
    z(x == 1)
  }
}
", (ide, expect) => {
  expect("<stdin>:3:7, <stdin>:5:5, <stdin>:5:10, <stdin>:7:7", ide.renameQuery(4, 4))
})

# Renaming: test instance functions without arguments
testIDE("
def foo {
  foo
}
class Foo {
  def foo {
    foo
    var bar = (foo int) int => {
      new.foo
      return foo
    }
    bar(0)
  }
}
", (ide, expect) => {
  expect("<stdin>:5:7, <stdin>:6:5, <stdin>:8:11", ide.renameQuery(5, 4))
})

# Renaming: test instance functions with arguments
testIDE("
def foo(x int) {
  foo(x)
}
class Foo {
  def foo(x int) {
    foo(x)
    var bar = (foo int) int => {
      new.foo(x)
      return foo
    }
    bar(0)
  }
}
", (ide, expect) => {
  expect("<stdin>:5:7, <stdin>:6:5, <stdin>:8:11", ide.renameQuery(5, 4))
})

# Renaming: test instance functions without arguments
testIDE("
def foo {
  foo
}
namespace Foo {
  def foo {
    foo
    var bar = (foo int) int => {
      Foo.foo
      return foo
    }
    bar(0)
  }
}
", (ide, expect) => {
  expect("<stdin>:5:7, <stdin>:6:5, <stdin>:8:11", ide.renameQuery(5, 4))
})

# Renaming: test instance functions with arguments
testIDE("
def foo(x int) {
  foo(x)
}
namespace Foo {
  def foo(x int) {
    foo(x)
    var bar = (foo int) int => {
      Foo.foo(x)
      return foo
    }
    bar(0)
  }
}
", (ide, expect) => {
  expect("<stdin>:5:7, <stdin>:6:5, <stdin>:8:11", ide.renameQuery(5, 4))
})

# Renaming: test classes
testIDE("
class Foo.Bar {}
namespace Foo.Bar {
  def new Bar {
    var bar Bar = <Bar/>
    var baz Baz.Bar = null
    baz = baz ?? Baz.Bar.new
    return bar
  }
}
class Baz.Bar {}
", (ide, expect) => {
  expect("<stdin>:1:11, <stdin>:2:15, <stdin>:3:11, <stdin>:4:13, <stdin>:4:20", ide.renameQuery(2, 10))
})

# Renaming: test overridden instance methods
testIDE("
class Foo :: IFoo {
  def foo {}
  def foo(x int) {}
}
class Bar : Foo {
  over foo {}
  over foo(x int) {}
}
class Baz : Bar {
  over foo {}
  over foo(x int) {}
}
class Nope {
  def foo {}
  def foo(x int) {}
}
interface IFoo {
  def foo
  def foo(x int)
}
", (ide, expect) => {
  expect("<stdin>:2:7, <stdin>:6:8, <stdin>:10:8, <stdin>:18:7", ide.renameQuery(5, 7))
})

# Renaming: test overloaded interface methods
testIDE("
interface Foo {
  def foo
  def foo(x int) {}
}
class Bar :: Foo {
  def foo {}
  def foo(x int) {}
}
class Baz :: Foo {
  def foo {}
  def foo(x int) {}
}
class Nope {
  def foo {}
  def foo(x int) {}
}
", (ide, expect) => {
  expect("<stdin>:2:7, <stdin>:6:7, <stdin>:10:7", ide.renameQuery(1, 6))
})

# Completion: variable type
testCompletion("
var x i
var y = 0
", 0, 7, "
<stdin>:1:7: error: \"i\" is not declared
var x i
      ^
<stdin>:1:7: completions:
var x i
      ^
      [IntMap] # \"class\"
      [int] # \"class\"
")

# Completion: variable inside instance function
testCompletion("
class Foo {
  var bar = 0

  def baz {
    ba
  }
}
", 4, 6, "
<stdin>:5:5: error: \"ba\" is not declared, did you mean \"bar\"?
    ba
    ~~
<stdin>:2:7: note: \"bar\" is defined here
  var bar = 0
      ~~~
<stdin>:5:5: completions:
    ba
    ~~
    [bar] # \"int\"
    [baz] # \"()\"
")

# Completion: global inside instance function
testCompletion("
class Foo {
  var bar = 0

  def baz {
    n
  }
}

namespace Foo {
  var nox = 0
}
", 4, 5, "
<stdin>:5:5: error: \"n\" is not declared
    n
    ^
<stdin>:5:5: completions:
    n
    ^
    [new] # \"() Foo\"
    [nox] # \"int\"
")

# Completion: instance inside global function
testCompletion("
class Foo {
  var bar = 0
}

namespace Foo {
  def foo {
    ba
  }

  var baz = 0
}
", 6, 6, "
<stdin>:7:5: error: \"ba\" is not declared, did you mean \"baz\"?
    ba
    ~~
<stdin>:10:7: note: \"baz\" is defined here
  var baz = 0
      ~~~
<stdin>:7:5: completions:
    ba
    ~~
    [baz] # \"int\"
")

# Completion: multi-level instance check
testCompletion("
class Foo {
  var bar = 0

  class Bar {
    var baz = 0

    def foo {
      ba
    }
  }

  namespace Bar {
    var ban = 0
  }
}

namespace Foo {
  var bax = 0
}

var bat = 0
", 7, 8, "
<stdin>:8:7: error: \"ba\" is not declared, did you mean \"bar\"?
      ba
      ~~
<stdin>:2:7: note: \"bar\" is defined here
  var bar = 0
      ~~~
<stdin>:8:7: completions:
      ba
      ~~
      [Bar] # \"class\"
      [ban] # \"int\"
      [bat] # \"int\"
      [bax] # \"int\"
      [baz] # \"int\"
")

# Completion: empty dot access
testCompletion("
def main(foo Foo) {
  foo.
}

class Foo {
  var foo = 0
  var bar = 0
  var baz = 0
}
", 1, 6, "
<stdin>:2:7: error: Expected identifier but found newline
  foo.
      ^
<stdin>:2:7: completions:
  foo.
      ^
      [bar] # \"int\"
      [baz] # \"int\"
      [foo] # \"int\"
")

# Completion: partial dot access
testCompletion("
def main(foo Foo) {
  foo.bar
}

class Foo {
  var foo = 0
  var bar = 0
  var baz = 0
}
", 1, 6, "
<stdin>:2:3: warning: Unused expression
  foo.bar
  ~~~~~~~
<stdin>:2:7: completions:
  foo.bar
      ~~~
      [bar] # \"int\"
      [baz] # \"int\"
      [foo] # \"int\"
")

# Completion: partial dot access
testCompletion("
def main(foo Foo) {
  foo.bar
}

class Foo {
  var foo = 0
  var bar = 0
  var baz = 0
}
", 1, 8, "
<stdin>:2:3: warning: Unused expression
  foo.bar
  ~~~~~~~
<stdin>:2:7: completions:
  foo.bar
      ~~~
      [bar] # \"int\"
      [baz] # \"int\"
")

# Completion: dot access
testCompletion("
def main(foo Foo) {
  foo.bar
}

class Foo {
  var foo = 0
  var bar = 0
  var baz = 0
}
", 1, 9, "
<stdin>:2:3: warning: Unused expression
  foo.bar
  ~~~~~~~
<stdin>:2:7: completions:
  foo.bar
      ~~~
      [bar] # \"int\"
")

# Completion: global dot access
testCompletion("
def main {
  Foo.
}

class Foo {
  var foo = 0
  var bar = 0
}

namespace Foo {
  var baz = 0
}
", 1, 6, "
<stdin>:2:7: error: Expected identifier but found newline
  Foo.
      ^
<stdin>:2:7: completions:
  Foo.
      ^
      [baz] # \"int\"
      [new] # \"() Foo\"
")

# Completion: comments
testCompletion("
# This is the
# first paragraph
# of text.
#
# This is the
# second paragraph
# of text.
def main {
  ma
}
", 8, 4, "
<stdin>:9:3: error: \"ma\" is not declared
  ma
  ~~
<stdin>:9:3: completions:
  ma
  ~~
  [Math] # \"namespace\"
  [main] # \"()\"
         # This is the
         # first paragraph
         # of text.
         #
         # This is the
         # second paragraph
         # of text.
")

# Completion: class object
testCompletion("
class Foo {}
var foo F
", 1, 9, "
<stdin>:2:9: error: \"F\" is not declared
var foo F
        ^
<stdin>:2:9: completions:
var foo F
        ^
        [Foo] # \"class\"
")

# Completion: interface object
testCompletion("
interface Foo {}
var foo F
", 1, 9, "
<stdin>:2:9: error: \"F\" is not declared
var foo F
        ^
<stdin>:2:9: completions:
var foo F
        ^
        [Foo] # \"interface\"
")

# Completion: namespace object
testCompletion("
namespace Foo {}
var foo F
", 1, 9, "
<stdin>:2:9: error: \"F\" is not declared
var foo F
        ^
<stdin>:2:9: completions:
var foo F
        ^
        [Foo] # \"namespace\"
")

# Completion: enum object
testCompletion("
enum Foo {}
var foo F
", 1, 9, "
<stdin>:2:9: error: \"F\" is not declared
var foo F
        ^
<stdin>:2:9: completions:
var foo F
        ^
        [Foo] # \"enum\"
")

# Completion: flags object
testCompletion("
flags Foo {}
var foo F
", 1, 9, "
<stdin>:2:9: error: \"F\" is not declared
var foo F
        ^
<stdin>:2:9: completions:
var foo F
        ^
        [Foo] # \"flags\"
")

# Completion: wrapped object
testCompletion("
type Foo : int {}
var foo F
", 1, 9, "
<stdin>:2:9: error: \"F\" is not declared
var foo F
        ^
<stdin>:2:9: completions:
var foo F
        ^
        [Foo] # \"type\"
")

# Completion: enum with inferred target
testCompletion("
enum Foo { FOO }
var foo Foo = .F
", 1, 15, "
<stdin>:2:16: error: \"F\" is not declared on type \"Foo\"
var foo Foo = .F
               ^
<stdin>:2:16: completions:
var foo Foo = .F
               ^
               [FOO] # \"Foo\"
")

# Completion: inside partial if statement
testCompletion("
def foo {
  if f
}
", 1, 6, "
<stdin>:3:1: error: Expected \"{\" but found \"}\"
}
^
<stdin>:2:6: error: \"f\" is not declared
  if f
     ^
<stdin>:2:6: completions:
  if f
     ^
     [foo] # \"()\"
")

# Signatures: test basic signature queries
testIDE("
def test(foo int, bar bool) double {
  return test(foo, bar)
}
", (ide, expect) => {
  expect("", ide.signatureQuery(1, 12))
  expect("def test([foo int], bar bool) double", ide.signatureQuery(1, 13))
  expect("def test([foo int], bar bool) double", ide.signatureQuery(1, 17))
  expect("def test(foo int, [bar bool]) double", ide.signatureQuery(1, 18))
  expect("def test(foo int, [bar bool]) double", ide.signatureQuery(1, 23))
})

  }
}
