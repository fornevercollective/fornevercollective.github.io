namespace Skew.Tests {
  def testLibrary {
    testExpect("sanity check", => toString([1, 2, 3]), "[1, 2, 3]")
    testExpect("sanity check", => toString(["1", "2", "3"]), "[1, 2, 3]")
    testExpect("sanity check", => toString({1: 0.5, 2: -0.5}), "{1: 0.5, 2: -0.5}")
    testExpect("sanity check", => toString({"a": 0.5, "b": -0.5}), "{a: 0.5, b: -0.5}")

    # Verify lambda environment capture
    testExpect("sanity check", () string => {
      var x = (y int) => => y
      var a = x(1)
      var b = x(2)
      return (a() + b()).toString
    }, "3")
    testExpect("sanity check", () string => {
      var x = (y int) => => => => y
      var a = x(1)
      var b = x(2)
      return (a()()() + b()()()).toString
    }, "3")

    ################################################################################
    # Math

    testExpect("Math.abs(2.5)", => Math.abs(2.5), 2.5)
    testExpect("Math.abs(-2.5)", => Math.abs(-2.5), 2.5)
    testExpect("Math.abs(2)", => Math.abs(2), 2)
    testExpect("Math.abs(-2)", => Math.abs(-2), 2)

    testExpect("Math.acos(-1)", => Math.acos(-1), Math.PI)
    testExpect("Math.acos(0)", => Math.acos(0), Math.PI / 2)
    testExpect("Math.acos(1)", => Math.acos(1), 0)

    testExpect("Math.asin(-1)", => Math.asin(-1), -Math.PI / 2)
    testExpect("Math.asin(0)", => Math.asin(0), 0)
    testExpect("Math.asin(1)", => Math.asin(1), Math.PI / 2)

    testExpect("Math.atan(0)", => Math.atan(0), 0)

    testExpect("Math.atan2(0, 1)", => Math.atan2(0, 1), 0)
    testExpect("Math.atan2(1, 0)", => Math.atan2(1, 0), Math.PI / 2)
    testExpect("Math.atan2(0, -1)", => Math.atan2(0, -1), Math.PI)
    testExpect("Math.atan2(-1, 0)", => Math.atan2(-1, 0), -Math.PI / 2)

    testExpect("Math.sin(0)", => Math.sin(0), 0)
    testExpect("Math.cos(0)", => Math.cos(0), 1)
    testExpect("Math.tan(0)", => Math.tan(0), 0)

    testExpect("Math.floor(1.5)", => Math.floor(1.5), 1)
    testExpect("Math.floor(-1.5)", => Math.floor(-1.5), -2)
    testExpect("Math.ceil(1.5)", => Math.ceil(1.5), 2)
    testExpect("Math.ceil(-1.5)", => Math.ceil(-1.5), -1)
    testExpect("Math.round(1.25)", => Math.round(1.25), 1)
    testExpect("Math.round(-1.25)", => Math.round(-1.25), -1)
    testExpect("Math.round(1.75)", => Math.round(1.75), 2)
    testExpect("Math.round(-1.75)", => Math.round(-1.75), -2)

    testExpect("Math.exp(0)", => Math.exp(0), 1)
    testExpect("Math.exp(1)", => Math.exp(1), Math.E)
    testExpect("Math.log(1)", => Math.log(1), 0)
    testExpect("Math.log(Math.E)", => Math.log(Math.E), 1)
    testExpect("Math.pow(2, 3)", => Math.pow(2, 3), 8)
    testExpect("Math.sqrt(4)", => Math.sqrt(4), 2)

    testExpect("0 <= Math.random < 1", () bool => {
      for i in 0..1000 {
        var value = Math.random
        if value < 0 || value >= 1 {
          return false
        }
      }
      return true
    }, true)

    testExpect("a <= Math.randomInRange(a, b) <= b", () bool => {
      for i in 0..1000 {
        var a = Math.random
        var b = a + Math.random
        var value = Math.randomInRange(a, b)
        if value < a || value > b {
          return false
        }
      }
      return true
    }, true)

    testExpect("a <= Math.randomInRange(a, b) < b", () bool => {
      for i in 0..1000 {
        var a = (Math.random * 100) as int
        var b = a + (Math.random * 100) as int
        var value int = Math.randomInRange(a, b)
        if value < a || (a != b ? value >= b : value != b) {
          return false
        }
      }
      return true
    }, true)

    testExpect("Math.max(-2.0, 3.0)", => Math.max(-2.0, 3.0), 3)
    testExpect("Math.min(-2.0, 3.0)", => Math.min(-2.0, 3.0), -2)
    testExpect("Math.max(3.0, -2.0)", => Math.max(3.0, -2.0), 3)
    testExpect("Math.min(3.0, -2.0)", => Math.min(3.0, -2.0), -2)
    testExpect("Math.max(-2, 3)", => Math.max(-2, 3), 3)
    testExpect("Math.min(-2, 3)", => Math.min(-2, 3), -2)
    testExpect("Math.max(3, -2)", => Math.max(3, -2), 3)
    testExpect("Math.min(3, -2)", => Math.min(3, -2), -2)

    testExpect("Math.max(-2.0, 0.0, 3.0)", => Math.max(-2.0, 0.0, 3.0), 3)
    testExpect("Math.min(-2.0, 0.0, 3.0)", => Math.min(-2.0, 0.0, 3.0), -2)
    testExpect("Math.max(3.0, -2.0, 0.0)", => Math.max(3.0, -2.0, 0.0), 3)
    testExpect("Math.min(3.0, -2.0, 0.0)", => Math.min(3.0, -2.0, 0.0), -2)
    testExpect("Math.max(0.0, 3.0, -2.0)", => Math.max(0.0, 3.0, -2.0), 3)
    testExpect("Math.min(0.0, 3.0, -2.0)", => Math.min(0.0, 3.0, -2.0), -2)
    testExpect("Math.max(-2, 0, 3)", => Math.max(-2, 0, 3), 3)
    testExpect("Math.min(-2, 0, 3)", => Math.min(-2, 0, 3), -2)
    testExpect("Math.max(3, -2, 0)", => Math.max(3, -2, 0), 3)
    testExpect("Math.min(3, -2, 0)", => Math.min(3, -2, 0), -2)
    testExpect("Math.max(0, 3, -2)", => Math.max(0, 3, -2), 3)
    testExpect("Math.min(0, 3, -2)", => Math.min(0, 3, -2), -2)

    testExpect("Math.max(-1.0, 2.0, -3.0, 4.0)", => Math.max(-1.0, 2.0, -3.0, 4.0), 4)
    testExpect("Math.min(-1.0, 2.0, -3.0, 4.0)", => Math.min(-1.0, 2.0, -3.0, 4.0), -3)
    testExpect("Math.max(4.0, -1.0, 2.0, -3.0)", => Math.max(4.0, -1.0, 2.0, -3.0), 4)
    testExpect("Math.min(4.0, -1.0, 2.0, -3.0)", => Math.min(4.0, -1.0, 2.0, -3.0), -3)
    testExpect("Math.max(-3.0, 4.0, -1.0, 2.0)", => Math.max(-3.0, 4.0, -1.0, 2.0), 4)
    testExpect("Math.min(-3.0, 4.0, -1.0, 2.0)", => Math.min(-3.0, 4.0, -1.0, 2.0), -3)
    testExpect("Math.max(2.0, -3.0, 4.0, -1.0)", => Math.max(2.0, -3.0, 4.0, -1.0), 4)
    testExpect("Math.min(2.0, -3.0, 4.0, -1.0)", => Math.min(2.0, -3.0, 4.0, -1.0), -3)
    testExpect("Math.max(-1, 2, -3, 4)", => Math.max(-1, 2, -3, 4), 4)
    testExpect("Math.min(-1, 2, -3, 4)", => Math.min(-1, 2, -3, 4), -3)
    testExpect("Math.max(4, -1, 2, -3)", => Math.max(4, -1, 2, -3), 4)
    testExpect("Math.min(4, -1, 2, -3)", => Math.min(4, -1, 2, -3), -3)
    testExpect("Math.max(-3, 4, -1, 2)", => Math.max(-3, 4, -1, 2), 4)
    testExpect("Math.min(-3, 4, -1, 2)", => Math.min(-3, 4, -1, 2), -3)
    testExpect("Math.max(2, -3, 4, -1)", => Math.max(2, -3, 4, -1), 4)
    testExpect("Math.min(2, -3, 4, -1)", => Math.min(2, -3, 4, -1), -3)

    testExpect("Math.clamp(-3.0, -1.0, 2.0)", => Math.clamp(-3.0, -1.0, 2.0), -1)
    testExpect("Math.clamp(3.0, -1.0, 2.0)", => Math.clamp(3.0, -1.0, 2.0), 2)
    testExpect("Math.clamp(-3, -1, 2)", => Math.clamp(-3, -1, 2), -1)
    testExpect("Math.clamp(3, -1, 2)", => Math.clamp(3, -1, 2), 2)

    testExpect("Math.E", => Math.E, 2.718281828459045)
    testExpect("Math.INFINITY", => Math.INFINITY, 1 / 0.0)
    testExpect("Math.NAN", => Math.NAN, 0 / 0.0)
    testExpect("Math.PI", => Math.PI, 3.141592653589793)
    testExpect("Math.SQRT_2", => Math.SQRT_2, 1.4142135623730951)

    ################################################################################
    # bool

    # Unary
    testExpect("!false", => !false, true)
    testExpect("!true", => !true, false)

    # Binary
    testExpect("false && false", => false && false, false)
    testExpect("false && true", => false && true, false)
    testExpect("true && false", => true && false, false)
    testExpect("true && true", => true && true, true)
    testExpect("false || false", => false || false, false)
    testExpect("false || true", => false || true, true)
    testExpect("true || false", => true || false, true)
    testExpect("true || true", => true || true, true)

    # Short-circuit
    testExpect("true || (=> { throw null })()", => (true || (=> { throw null })()).toString, "true")
    testExpect("false && (=> { throw null })()", => (false && (=> { throw null })()).toString, "false")

    # toString
    testExpect("false.toString", => false.toString, "false")
    testExpect("true.toString", => true.toString, "true")

    ################################################################################
    # int

    # Literals
    testExpect("'a'", => 'a', 97)
    testExpect("0b101", => 0b101, 5)
    testExpect("-0b101", => -0b101, -5)
    testExpect("0o123", => 0o123, 83)
    testExpect("-0o123", => -0o123, -83)
    testExpect("0x123", => 0x123, 291)
    testExpect("-0x123", => -0x123, -291)

    # Unary
    testExpect("+2", => +2, 2)
    testExpect("3++", () int => {
      var x = 3
      x++
      return x
    }, 4)
    testExpect("++3", () int => {
      var x = 3
      ++x
      return x
    }, 4)
    testExpect("-2", => -2, -2)
    testExpect("3--", () int => {
      var x = 3
      x--
      return x
    }, 2)
    testExpect("--3", () int => {
      var x = 3
      --x
      return x
    }, 2)
    testExpect("~2", => ~2, -3)

    # Binary
    testExpect("5 + 3", => 5 + 3, 8)
    testExpect("5 - 3", => 5 - 3, 2)
    testExpect("5 * 3", => 5 * 3, 15)
    testExpect("5 / 3", => 5 / 3, 1)
    testExpect("5 % 3", => 5 % 3, 2)
    testExpect("-5 % 3", => -5 % 3, -2)
    testExpect("5 %% 3", => 5 %% 3, 2)
    testExpect("-5 %% 3", => -5 %% 3, 1)
    testExpect("5 %% -3", => 5 %% -3, -1)
    testExpect("-5 %% -3", => -5 %% -3, -2)
    testExpect("5 << 3", => 5 << 3, 40)
    testExpect("5 >> 1", => 5 >> 1, 2)
    testExpect("-5 >> 1", => -5 >> 1, -3)
    testExpect("5 >>> 1", => 5 >>> 1, 2)
    testExpect("-5 >>> 1", => -5 >>> 1, 0x7FFFFFFD)
    testExpect("2 ** 3", => 2 ** 3, 8)
    testExpect("44 | 33", => 44 | 33, 45)
    testExpect("44 & 33", => 44 & 33, 32)
    testExpect("44 ^ 33", => 44 ^ 33, 13)
    testExpect("-44 | 33", => -44 | 33, -11)
    testExpect("-44 & 33", => -44 & 33, 0)
    testExpect("-44 ^ 33", => -44 ^ 33, -11)
    testExpect("-44 | -33", => -44 | -33, -33)
    testExpect("-44 & -33", => -44 & -33, -44)
    testExpect("-44 ^ -33", => -44 ^ -33, 11)
    testExpect("2 <=> 5", => 2 <=> 5, -1)
    testExpect("2 <=> 2", => 2 <=> 2, 0)
    testExpect("5 <=> 2", => 5 <=> 2, 1)
    testExpect("-0x7FFFFFFF <=> 0x7FFFFFFF", => -0x7FFFFFFF <=> 0x7FFFFFFF, -1)

    # 32-bit integer multiplication
    var imul = (a int, b int) => a * b
    testExpect("0x12345678 * 0x87654321", => imul(0x12345678, 0x87654321), 0x70B88D78)
    testExpect("0x12345678 * -0x87654321", => imul(0x12345678, -0x87654321), -0x70B88D78)
    testExpect("-0xDEADF00D * -0xCAFEBABE", => imul(-0xDEADF00D, -0xCAFEBABE), 0x14679BA6)

    # Binary assignment
    testExpect("5 += 3", () int => {
      var x = 5
      x += 3
      return x
    }, 8)
    testExpect("5 -= 3", () int => {
      var x = 5
      x -= 3
      return x
    }, 2)
    testExpect("5 *= 3", () int => {
      var x = 5
      x *= 3
      return x
    }, 15)
    testExpect("5 /= 3", () int => {
      var x = 5
      x /= 3
      return x
    }, 1)
    testExpect("5 %= 3", () int => {
      var x = 5
      x %= 3
      return x
    }, 2)
    testExpect("-5 %%= 3", () int => {
      var x = -5
      x %%= 3
      return x
    }, 1)
    testExpect("2 **= 3", () int => {
      var x = 2
      x **= 3
      return x
    }, 8)
    testExpect("44 |= 33", () int => {
      var x = 44
      x |= 33
      return x
    }, 45)
    testExpect("44 &= 33", () int => {
      var x = 44
      x &= 33
      return x
    }, 32)
    testExpect("44 ^= 33", () int => {
      var x = 44
      x ^= 33
      return x
    }, 13)
    testExpect("5 <<= 3", () int => {
      var x = 5
      x <<= 3
      return x
    }, 40)
    testExpect("5 >>= 1", () int => {
      var x = 5
      x >>= 1
      return x
    }, 2)
    testExpect("-5 >>= 1", () int => {
      var x = -5
      x >>= 1
      return x
    }, -3)
    testExpect("5 >>>= 1", () int => {
      var x = 5
      x >>>= 1
      return x
    }, 2)
    testExpect("-5 >>>= 1", () int => {
      var x = -5
      x >>>= 1
      return x
    }, 0x7FFFFFFD)

    testExpect("int.MIN", => int.MIN, -0x7FFFFFFF - 1)
    testExpect("int.MAX", => int.MAX, 0x7FFFFFFF)

    ################################################################################
    # double

    # Unary
    testExpect("+2.0", => +2.0, 2.0)
    testExpect("x++", () double => {
      var x = 3.5
      x++
      return x
    }, 4.5)
    testExpect("++x", () double => {
      var x = 3.5
      ++x
      return x
    }, 4.5)
    testExpect("-2.0", => -2.0, -2.0)
    testExpect("x--", () double => {
      var x = 3.5
      x--
      return x
    }, 2.5)
    testExpect("--x", () double => {
      var x = 3.5
      --x
      return x
    }, 2.5)

    # Binary
    testExpect("5.5 + 3.0", => 5.5 + 3.0, 8.5)
    testExpect("5.5 - 3.0", => 5.5 - 3.0, 2.5)
    testExpect("5.5 * 3.0", => 5.5 * 3.0, 16.5)
    testExpect("5.0 / 3.0", => 5.0 / 3.0, 1.6666666666666667)
    testExpect("5.0 %% 3.5", => 5.0 %% 3.5, 1.5)
    testExpect("-5.0 %% 3.5", => -5.0 %% 3.5, 2)
    testExpect("5.0 %% -3.5", => 5.0 %% -3.5, -2)
    testExpect("-5.0 %% -3.5", => -5.0 %% -3.5, -1.5)
    testExpect("2.0 ** 3.0", => 2.0 ** 3.0, 8)
    testExpect("2.0 ** 0.5", => 2.0 ** 0.5, 1.4142135623730951)
    testExpect("2.0 <=> 5.5", => 2.0 <=> 5.5, -1)
    testExpect("2.0 <=> 2.0", => 2.0 <=> 2.0, 0)
    testExpect("5.5 <=> 2.0", => 5.5 <=> 2.0, 1)

    # Binary assignment
    testExpect("5.5 += 3.0", () double => {
      var x = 5.5
      x += 3.0
      return x
    }, 8.5)
    testExpect("5.5 -= 3.0", () double => {
      var x = 5.5
      x -= 3.0
      return x
    }, 2.5)
    testExpect("5.5 *= 3.0", () double => {
      var x = 5.5
      x *= 3.0
      return x
    }, 16.5)
    testExpect("5.0 /= 3.0", () double => {
      var x = 5.0
      x /= 3.0
      return x
    }, 1.6666666666666667)
    testExpect("-5.0 %%= 3.5", () double => {
      var x = -5.0
      x %%= 3.5
      return x
    }, 2)
    testExpect("2.0 **= 3.0", () double => {
      var x = 2.0
      x **= 3
      return x
    }, 8)

    # isFinite
    testExpect("0.0.isFinite", => 0.0.isFinite, true)
    testExpect("Math.NAN.isFinite", => Math.NAN.isFinite, false)
    testExpect("Math.INFINITY.isFinite", => Math.INFINITY.isFinite, false)
    testExpect("(-Math.INFINITY).isFinite", => (-Math.INFINITY).isFinite, false)

    # isNaN
    testExpect("0.0.isNaN", => 0.0.isNaN, false)
    testExpect("Math.NAN.isNaN", => Math.NAN.isNaN, true)
    testExpect("Math.INFINITY.isNaN", => Math.INFINITY.isNaN, false)
    testExpect("(-Math.INFINITY).isNaN", => (-Math.INFINITY).isNaN, false)

    ################################################################################
    # string

    # Literals
    testExpect("", => "", "")
    testExpect("\\0", => "\0", "\0")
    testExpect("\\x00", => "\x00", "\0")
    testExpect("\\01", => "\01", "\0" + "1")
    testExpect("\\x001", => "\x001", "\0" + "1")

    # Binary
    testExpect("\"a\\0b\" + \"x\\0y\"", => "a\0b" + "x\0y", "a\0bx\0y")
    testExpect("\"a\\0b\" += \"x\\0y\"", () string => {
      var x = "a\0b"
      x += "x\0y"
      return x
    }, "a\0bx\0y")
    testExpect("\"\\0a\" <=> \"\\0x\"", => "\0a" <=> "\0x", -1)
    testExpect("\"\\0a\" <=> \"\\0a\"", => "\0a" <=> "\0a", 0)
    testExpect("\"\\0x\" <=> \"\\0a\"", => "\0x" <=> "\0a", 1)

    # count
    testExpect("\"a\\0b\".count", => "a\0b".count, 3)

    # in
    testExpect("\"a\\0b\" in \"a\\0\"", => "a\0b" in "a\0", false)
    testExpect("\"a\\0b\" in \"a\\0b\"", => "a\0b" in "a\0b", true)
    testExpect("\"a\\0b\" in \"a\\0bc\"", => "a\0b" in "a\0bc", true)
    testExpect("\"a\\0b\" in \" a\\0b\"", => "a\0b" in " a\0b", true)
    testExpect("\"a\\0b\" in \" a\\0bc\"", => "a\0b" in " a\0bc", true)

    # indexOf
    testExpect("\"a\\0\".indexOf(\"a\\0b\")", => "a\0".indexOf("a\0b"), -1)
    testExpect("\"a\\0b\".indexOf(\"a\\0b\")", => "a\0b".indexOf("a\0b"), 0)
    testExpect("\" a\\0b \".indexOf(\"a\\0b\")", => " a\0b ".indexOf("a\0b"), 1)
    testExpect("\" a\\0b a\\0b \".indexOf(\"a\\0b\")", => " a\0b a\0b ".indexOf("a\0b"), 1)

    # lastIndexOf
    testExpect("\"a\\0\".lastIndexOf(\"a\\0b\")", => "a\0".lastIndexOf("a\0b"), -1)
    testExpect("\"a\\0b\".lastIndexOf(\"a\\0b\")", => "a\0b".lastIndexOf("a\0b"), 0)
    testExpect("\" a\\0b \".lastIndexOf(\"a\\0b\")", => " a\0b ".lastIndexOf("a\0b"), 1)
    testExpect("\" a\\0b a\\0b \".lastIndexOf(\"a\\0b\")", => " a\0b a\0b ".lastIndexOf("a\0b"), 5)

    # startsWith
    testExpect("\"a\\0\".startsWith(\"a\\0b\")", => "a\0".startsWith("a\0b"), false)
    testExpect("\"a\\0b\".startsWith(\"a\\0b\")", => "a\0b".startsWith("a\0b"), true)
    testExpect("\"a\\0bc\".startsWith(\"a\\0b\")", => "a\0bc".startsWith("a\0b"), true)
    testExpect("\" a\\0b\".startsWith(\"a\\0b\")", => " a\0b".startsWith("a\0b"), false)

    # endsWith
    testExpect("\"a\\0\".endsWith(\"a\\0b\")", => "a\0".endsWith("a\0b"), false)
    testExpect("\"a\\0b\".endsWith(\"a\\0b\")", => "a\0b".endsWith("a\0b"), true)
    testExpect("\"a\\0bc\".endsWith(\"a\\0b\")", => "a\0bc".endsWith("a\0b"), false)
    testExpect("\" a\\0b\".endsWith(\"a\\0b\")", => " a\0b".endsWith("a\0b"), true)

    # []
    testExpect("\"a\\0b\"[0]", => "a\0b"[0], 'a')
    testExpect("\"a\\0b\"[1]", => "a\0b"[1], '\0')
    testExpect("\"a\\0b\"[2]", => "a\0b"[2], 'b')

    # get
    testExpect("\"a\\0b\".get(0)", => "a\0b".get(0), "a")
    testExpect("\"a\\0b\".get(1)", => "a\0b".get(1), "\0")
    testExpect("\"a\\0b\".get(2)", => "a\0b".get(2), "b")

    # slice
    testExpect("\"a\\0b\".slice(1)", => "a\0b".slice(1), "\0b")
    testExpect("\"a\\0b\".slice(1, 2)", => "a\0b".slice(1, 2), "\0")

    # Unicode
    testExpect("\"a\\0b\".codePoints", => "a\0b".codePoints, ['a', '\0', 'b'])
    testExpect("\"a\\0b\".codeUnits", => "a\0b".codeUnits, ['a', '\0', 'b'])
    testExpect("string.fromCodePoint('\\0')", => string.fromCodePoint('\0'), "\0")
    testExpect("string.fromCodePoint('a')", => string.fromCodePoint('a'), "a")
    testExpect("string.fromCodeUnit('\\0')", => string.fromCodeUnit('\0'), "\0")
    testExpect("string.fromCodeUnit('a')", => string.fromCodeUnit('a'), "a")
    testExpect("string.fromCodePoints(['a', '\\0', 'b'])", => string.fromCodePoints(['a', '\0', 'b']), "a\0b")
    testExpect("string.fromCodeUnits(['a', '\\0', 'b'])", => string.fromCodeUnits(['a', '\0', 'b']), "a\0b")

    # Other
    testExpect("\"a \\0 b\".split(\" \")", => "a \0 b".split(" "), ["a", "\0", "b"])
    testExpect("\" a \\0 b \".split(\" \")", => " a \0 b ".split(" "), ["", "a", "\0", "b", ""])
    testExpect("\" \".join([\"a\", \"\\0\", \"b\"])", => " ".join(["a", "\0", "b"]), "a \0 b")
    testExpect("\" \".join([\"\", \"a\", \"\\0\", \"b\", \"\"])", => " ".join(["", "a", "\0", "b", ""]), " a \0 b ")
    testExpect("\"a\\0b\".repeat(3)", => "a\0b".repeat(3), "a\0ba\0ba\0b")
    testExpect("\"a\\0b\\0c\".replaceAll(\"\\0\", \"\\0\\0\")", => "a\0b\0c".replaceAll("\0", "\0\0"), "a\0\0b\0\0c")
    testExpect("\"a\\0B\\0c\\0D\".toUpperCase", => "a\0B\0c\0D".toUpperCase, "A\0B\0C\0D")
    testExpect("\"a\\0B\\0c\\0D\".toLowerCase", => "a\0B\0c\0D".toLowerCase, "a\0b\0c\0d")
    testExpect("\"a\\0B\\0c\\0D\".toString", => "a\0B\0c\0D".toString, "a\0B\0c\0D")

    ################################################################################
    # List<T>

    # new
    testExpect("[] as List<int>", => [] as List<int>, [] as List<int>)
    testExpect("List<int>.new", => List<int>.new, [] as List<int>)
    testExpect("[1, 2, 3]", => [1, 2, 3], [1, 2, 3])

    # [] and []=
    testExpect("[1, 2, 3][1]", => [1, 2, 3][1], 2)
    testExpect("[1, 2, 3][1] = 4", () List<int> => {
      var x = [1, 2, 3]
      x[1] = 4
      return x
    }, [1, 4, 3])
    testExpect("[1, 2, 3][1] = 4", => [1, 2, 3][1] = 4, 4)

    # count
    testExpect("[1, 2, 3].count", => [1, 2, 3].count, 3)

    # isEmpty
    testExpect("List<int>.new.isEmpty", => List<int>.new.isEmpty, true)
    testExpect("[1, 2, 3].isEmpty", => [1, 2, 3].isEmpty, false)

    # resize
    testExpect("[1, 2, 3].resize(5, -1)", () List<int> => {
      var x = [1, 2, 3]
      x.resize(5, -1)
      return x
    }, [1, 2, 3, -1, -1])
    testExpect("[1, 2, 3].resize(1, -1)", () List<int> => {
      var x = [1, 2, 3]
      x.resize(1, -1)
      return x
    }, [1])

    # append
    testExpect("[1, 2, 3].append(4)", () List<int> => {
      var x = [1, 2, 3]
      x.append(4)
      return x
    }, [1, 2, 3, 4])
    testExpect("[1, 2, 3].append([4, 5])", () List<int> => {
      var x = [1, 2, 3]
      x.append([4, 5])
      return x
    }, [1, 2, 3, 4, 5])
    testExpect("[1, 2, 3].appendOne(4)", () List<int> => {
      var x = [1, 2, 3]
      x.appendOne(4)
      return x
    }, [1, 2, 3, 4])
    testExpect("[1, 2, 3].appendOne(2)", () List<int> => {
      var x = [1, 2, 3]
      x.appendOne(2)
      return x
    }, [1, 2, 3])

    # prepend
    testExpect("[1, 2, 3].prepend(4)", () List<int> => {
      var x = [1, 2, 3]
      x.prepend(4)
      return x
    }, [4, 1, 2, 3])
    testExpect("[1, 2, 3].prepend([4, 5])", () List<int> => {
      var x = [1, 2, 3]
      x.prepend([4, 5])
      return x
    }, [4, 5, 1, 2, 3])

    # insert
    testExpect("[1, 2, 3].insert(1, 4)", () List<int> => {
      var x = [1, 2, 3]
      x.insert(1, 4)
      return x
    }, [1, 4, 2, 3])
    testExpect("[1, 2, 3].insert(1, [4, 5])", () List<int> => {
      var x = [1, 2, 3]
      x.insert(1, [4, 5])
      return x
    }, [1, 4, 5, 2, 3])
    testExpect("[1, 2, 3].insert(3, 4)", () List<int> => {
      var x = [1, 2, 3]
      x.insert(3, 4)
      return x
    }, [1, 2, 3, 4])
    testExpect("[1, 2, 3].insert(3, [4, 5])", () List<int> => {
      var x = [1, 2, 3]
      x.insert(3, [4, 5])
      return x
    }, [1, 2, 3, 4, 5])

    # remove
    testExpect("[1, 2, 1, 3, 1].removeAll(1)", () List<int> => {
      var x = [1, 2, 1, 3, 1]
      x.removeAll(1)
      return x
    }, [2, 3])
    testExpect("[1, 2, 1, 3, 1].removeAll(0)", () List<int> => {
      var x = [1, 2, 1, 3, 1]
      x.removeAll(0)
      return x
    }, [1, 2, 1, 3, 1])
    testExpect("[1, 2, 3].removeAt(1)", () List<int> => {
      var x = [1, 2, 3]
      x.removeAt(1)
      return x
    }, [1, 3])
    testExpect("[1, 2, 1, 3, 1].removeDuplicates", () List<int> => {
      var x = [1, 2, 1, 3, 1]
      x.removeDuplicates
      return x
    }, [1, 2, 3])
    testExpect("[1, 2, 3].removeFirst", () List<int> => {
      var x = [1, 2, 3]
      x.removeFirst
      return x
    }, [2, 3])
    testExpect("[1, 2, 1, 3, 1].removeIf(y => y == 1)", () List<int> => {
      var x = [1, 2, 1, 3, 1]
      x.removeIf(y => y == 1)
      return x
    }, [2, 3])
    testExpect("[1, 2, 3].removeLast", () List<int> => {
      var x = [1, 2, 3]
      x.removeLast
      return x
    }, [1, 2])
    testExpect("[1, 2, 1, 3, 1].removeOne(1)", () List<int> => {
      var x = [1, 2, 1, 3, 1]
      x.removeOne(1)
      return x
    }, [2, 1, 3, 1])
    testExpect("[1, 2, 1, 3, 1].removeOne(0)", () List<int> => {
      var x = [1, 2, 1, 3, 1]
      x.removeOne(0)
      return x
    }, [1, 2, 1, 3, 1])
    testExpect("[1, 2, 1, 3, 1].removeRange(1, 4)", () List<int> => {
      var x = [1, 2, 1, 3, 1]
      x.removeRange(1, 4)
      return x
    }, [1, 1])

    # take
    testExpect("[1, 2, 3].takeFirst", => [1, 2, 3].takeFirst, 1)
    testExpect("[1, 2, 3].takeLast", => [1, 2, 3].takeLast, 3)
    testExpect("[1, 2, 3].takeAt(1)", => [1, 2, 3].takeAt(1), 2)
    testExpect("[1, 2, 3, 4, 5].takeRange(1, 4)", => [1, 2, 3, 4, 5].takeRange(1, 4), [2, 3, 4])
    testExpect("[1, 2, 3].takeFirst", () List<int> => {
      var x = [1, 2, 3]
      x.takeFirst
      return x
    }, [2, 3])
    testExpect("[1, 2, 3].takeLast", () List<int> => {
      var x = [1, 2, 3]
      x.takeLast
      return x
    }, [1, 2])
    testExpect("[1, 2, 3].takeAt(1)", () List<int> => {
      var x = [1, 2, 3]
      x.takeAt(1)
      return x
    }, [1, 3])
    testExpect("[1, 2, 3, 4, 5].takeRange(1, 4)", () List<int> => {
      var x = [1, 2, 3, 4, 5]
      x.takeRange(1, 4)
      return x
    }, [1, 5])

    # first
    testExpect("[1, 2, 3].first", => [1, 2, 3].first, 1)
    testExpect("[1, 2, 3].first = 4", () List<int> => {
      var x = [1, 2, 3]
      x.first = 4
      return x
    }, [4, 2, 3])
    testExpect("[1, 2, 3].first = 4", => [1, 2, 3].first = 4, 4)

    # last
    testExpect("[1, 2, 3].last", => [1, 2, 3].last, 3)
    testExpect("[1, 2, 3].last = 4", () List<int> => {
      var x = [1, 2, 3]
      x.last = 4
      return x
    }, [1, 2, 4])
    testExpect("[1, 2, 3].last = 4", => [1, 2, 3].last = 4, 4)

    # in
    testExpect("0 in [1, 2, 3]", => 0 in [1, 2, 3], false)
    testExpect("1 in [1, 2, 3]", => 1 in [1, 2, 3], true)

    # indexOf
    testExpect("[1, 2, 3, 2, 1].indexOf(0)", => [1, 2, 3, 2, 1].indexOf(0), -1)
    testExpect("[1, 2, 3, 2, 1].indexOf(2)", => [1, 2, 3, 2, 1].indexOf(2), 1)

    # lastIndexOf
    testExpect("[1, 2, 3, 2, 1].lastIndexOf(0)", => [1, 2, 3, 2, 1].lastIndexOf(0), -1)
    testExpect("[1, 2, 3, 2, 1].lastIndexOf(2)", => [1, 2, 3, 2, 1].lastIndexOf(2), 3)

    # all
    testExpect("[1, 2, 3].all(x => x < 0)", => [1, 2, 3].all(x => x < 0), false)
    testExpect("[1, 2, 3].all(x => x > 0)", => [1, 2, 3].all(x => x > 0), true)
    testExpect("[1, 2, 3].all(x => x > 1)", => [1, 2, 3].all(x => x > 1), false)

    # any
    testExpect("[1, 2, 3].any(x => x < 0)", => [1, 2, 3].any(x => x < 0), false)
    testExpect("[1, 2, 3].any(x => x > 0)", => [1, 2, 3].any(x => x > 0), true)
    testExpect("[1, 2, 3].any(x => x > 1)", => [1, 2, 3].any(x => x > 1), true)

    # clone
    testExpect("[1, 2, 3].clone", => [1, 2, 3].clone, [1, 2, 3])
    testExpect("(x => x != x.clone)([1, 2, 3])", => (x => x != x.clone)([1, 2, 3]), true)

    # each
    testExpect("[1, 2, 3].each(x => y += x)", () int => {
      var y = 0
      [1, 2, 3].each(x => y += x)
      return y
    }, 6)

    # equals
    testExpect("[1, 2, 3].equals([1, 2, 3])", => [1, 2, 3].equals([1, 2, 3]), true)
    testExpect("[1, 2, 3].equals([3, 2, 1])", => [1, 2, 3].equals([3, 2, 1]), false)
    testExpect("[1, 2, 3, 4].equals([1, 2, 3])", => [1, 2, 3, 4].equals([1, 2, 3]), false)
    testExpect("[1, 2, 3].equals([1, 2, 3, 4])", => [1, 2, 3].equals([1, 2, 3, 4]), false)

    # filter
    testExpect("[1, 2, 3, 2, 1].filter(x => x != 2)", => [1, 2, 3, 2, 1].filter(x => x != 2), [1, 3, 1])
    testExpect("(x => x != x.filter(y => true))([1, 2, 3])", => (x => x != x.filter(y => true))([1, 2, 3]), true)

    # map
    testExpect("[1, 2, 3, 2, 1].map<int>(x => x + 1)", => [1, 2, 3, 2, 1].map<int>(x => x + 1), [2, 3, 4, 3, 2])
    testExpect("(x => x != x.map<int>(y => y))([1, 2, 3])", => (x => x != x.map<int>(y => y))([1, 2, 3]), true)

    # reverse
    testExpect("[1, 2, 3].reverse", () List<int> => {
      var x = [1, 2, 3]
      x.reverse
      return x
    }, [3, 2, 1])

    # shuffle
    testExpect("[1, 2, 3, 4, 5].shuffle", () int => {
      var x = [1, 2, 3, 4, 5]
      var y = 0
      x.shuffle
      x.each(z => y += z)
      return y
    }, 1 + 2 + 3 + 4 + 5)

    # slice
    testExpect("[1, 2, 3].slice(1)", => [1, 2, 3].slice(1), [2, 3])
    testExpect("[1, 2, 3].slice(1, 2)", => [1, 2, 3].slice(1, 2), [2])

    # sort
    testExpect("[2, 1, 3].sort((a, b) => a <=> b)", () List<int> => {
      var x = [2, 1, 3]
      x.sort((a, b) => a <=> b)
      return x
    }, [1, 2, 3])

    # swap
    testExpect("[1, 2, 3].swap(0, 2)", () List<int> => {
      var x = [1, 2, 3]
      x.swap(0, 2)
      return x
    }, [3, 2, 1])

    ################################################################################
    # IntMap<T>

    # new
    testExpect("{} as IntMap<double>", => ({}) as IntMap<double>, {} as IntMap<double>)
    testExpect("IntMap<double>.new", => IntMap<double>.new, {} as IntMap<double>)
    testExpect("{1: 0.5, 2: -0.5}", => ({1: 0.5, 2: -0.5}), {1: 0.5, 2: -0.5})

    # [] and []=
    testExpect("{1: 0.5}[1]", => ({1: 0.5})[1], 0.5)
    testExpect("{1: 0.5}[1] = -0.5", () IntMap<double> => {
      var x = {1: 0.5}
      x[1] = -0.5
      return x
    }, {1: -0.5})
    testExpect("{1: 0.5}[1] = -0.5", => ({1: 0.5})[1] = -0.5, -0.5)

    # count
    testExpect("{1: 0.5, 2: -0.5}.count", => ({1: 0.5, 2: -0.5}).count, 2)

    # isEmpty
    testExpect("IntMap<double>.new.isEmpty", => IntMap<double>.new.isEmpty, true)
    testExpect("{1: 0.5, 2: -0.5}.isEmpty", => ({1: 0.5, 2: -0.5}).isEmpty, false)

    # keys
    testExpect("{1: 0.5, 2: -0.5}.keys", () List<int> => {
      var x = {1: 0.5, 2: -0.5}.keys
      x.sort((a, b) => a <=> b) # Sort so the order is deterministic
      return x
    }, [1, 2])

    # values
    testExpect("{1: 0.5, 2: -0.5}.values", () List<double> => {
      var x = {1: 0.5, 2: -0.5}.values
      x.sort((a, b) => a <=> b) # Sort so the order is deterministic
      return x
    }, [-0.5, 0.5])

    # clone
    testExpect("{1: 0.5, 2: -0.5}.clone", => ({1: 0.5, 2: -0.5}).clone, {1: 0.5, 2: -0.5})
    testExpect("(x => x != x.clone)({1: 0.5, 2: -0.5})", => (x => x != x.clone)({1: 0.5, 2: -0.5}), true)

    # each
    testExpect("{1: 0.5, 2: -0.5}.each((k, v) => x += k)", () int => {
      var x = 0
      {1: 0.5, 2: -0.5}.each((k, v) => x += k)
      return x
    }, 3)
    testExpect("{1: 0.5, 2: -1.0}.each((k, v) => x += v)", () double => {
      var x = 0.0
      {1: 0.5, 2: -1.0}.each((k, v) => x += v)
      return x
    }, -0.5)

    # get
    testExpect("{1: 0.5, 2: -0.5}.get(1, -1)", => ({1: 0.5, 2: -0.5}).get(1, -1), 0.5)
    testExpect("{1: 0.5, 2: -0.5}.get(0, -1)", => ({1: 0.5, 2: -0.5}).get(0, -1), -1)

    # in
    testExpect("0 in {1: 0.5, 2: -0.5}", => 0 in {1: 0.5, 2: -0.5}, false)
    testExpect("1 in {1: 0.5, 2: -0.5}", => 1 in {1: 0.5, 2: -0.5}, true)

    # remove
    testExpect("{1: 0.5, 2: -0.5}.remove(1)", () IntMap<double> => {
      var x = {1: 0.5, 2: -0.5}
      x.remove(1)
      return x
    }, {2: -0.5})
    testExpect("{1: 0.5, 2: -0.5}.remove(0)", () IntMap<double> => {
      var x = {1: 0.5, 2: -0.5}
      x.remove(0)
      return x
    }, {1: 0.5, 2: -0.5})

    ################################################################################
    # StringMap<T>

    # new
    testExpect("{} as StringMap<double>", => ({}) as StringMap<double>, {} as StringMap<double>)
    testExpect("StringMap<double>.new", => StringMap<double>.new, {} as StringMap<double>)
    testExpect("{\"\": 0.5, \"\\0\": -0.5}", => ({"": 0.5, "\0": -0.5}), {"": 0.5, "\0": -0.5})

    # [] and []=
    testExpect("{\"\": 0.5}[\"\"]", => ({"": 0.5})[""], 0.5)
    testExpect("{\"\": 0.5}[\"\"] = -0.5", () StringMap<double> => {
      var x = {"": 0.5}
      x[""] = -0.5
      return x
    }, {"": -0.5})
    testExpect("{\"\": 0.5}[\"\"] = -0.5", => ({"": 0.5})[""] = -0.5, -0.5)

    # count
    testExpect("{\"\": 0.5, \"\\0\": -0.5}.count", => ({"": 0.5, "\0": -0.5}).count, 2)

    # isEmpty
    testExpect("StringMap<double>.new.isEmpty", => StringMap<double>.new.isEmpty, true)
    testExpect("{\"\": 0.5, \"\\0\": -0.5}.isEmpty", => ({"": 0.5, "\0": -0.5}).isEmpty, false)

    # keys
    testExpect("{\"\": 0.5, \"\\0\": -0.5}.keys", () List<string> => {
      var x = {"": 0.5, "\0": -0.5}.keys
      x.sort((a, b) => a <=> b) # Sort so the order is deterministic
      return x
    }, ["", "\0"])

    # values
    testExpect("{\"\": 0.5, \"\\0\": -0.5}.values", () List<double> => {
      var x = {"": 0.5, "\0": -0.5}.values
      x.sort((a, b) => a <=> b) # Sort so the order is deterministic
      return x
    }, [-0.5, 0.5])

    # clone
    testExpect("{\"\": 0.5, \"\\0\": -0.5}.clone", => ({"": 0.5, "\0": -0.5}).clone, {"": 0.5, "\0": -0.5})
    testExpect("(x => x != x.clone)({\"\": 0.5, \"\\0\": -0.5})", => (x => x != x.clone)({"": 0.5, "\0": -0.5}), true)

    # each
    testExpect("{\"\": 0.5, \"\\0\": -0.5, \"a\": 0}.each((k, v) => x += k)", () bool => {
      var x = ""
      {"": 0.5, "\0": -0.5, "a": 0}.each((k, v) => x += k)
      return x == "a\0" || x == "\0a"
    }, true)
    testExpect("{\"\": 0.5, \"\\0\": -1.0}.each((k, v) => x += v)", () double => {
      var x = 0.0
      {"": 0.5, "\0": -1.0}.each((k, v) => x += v)
      return x
    }, -0.5)

    # get
    testExpect("{\"\": 0.5, \"\\0\": -0.5}.get(\"\\0\", -1)", => ({"": 0.5, "\0": -0.5}).get("\0", -1), -0.5)
    testExpect("{\"\": 0.5, \"\\0\": -0.5}.get(\"\", -1)", => ({"": 0.5, "\0": -0.5}).get("", -1), 0.5)
    testExpect("{\"\": 0.5, \"\\0\": -0.5}.get(\"x\", -1)", => ({"": 0.5, "\0": -0.5}).get("x", -1), -1)

    # in
    testExpect("\"x\" in {\"\": 0.5, \"\\0\": -0.5}", => "x" in {"": 0.5, "\0": -0.5}, false)
    testExpect("\"\" in {\"\": 0.5, \"\\0\": -0.5}", => "" in {"": 0.5, "\0": -0.5}, true)
    testExpect("\"\\0\" in {\"\": 0.5, \"\\0\": -0.5}", => "\0" in {"": 0.5, "\0": -0.5}, true)

    # remove
    testExpect("{\"\": 0.5, \"\\0\": -0.5}.remove(\"\")", () StringMap<double> => {
      var x = {"": 0.5, "\0": -0.5}
      x.remove("")
      return x
    }, {"\0": -0.5})
    testExpect("{\"\": 0.5, \"\\0\": -0.5}.remove(\"x\")", () StringMap<double> => {
      var x = {"": 0.5, "\0": -0.5}
      x.remove("x")
      return x
    }, {"": 0.5, "\0": -0.5})

    ################################################################################
    # StringBuilder

    testExpect("StringBuilder 1", () string => {
      var builder = StringBuilder.new
      builder.append("abc")
      builder.append("\0")
      builder.append("def")
      builder.append("")
      builder.append("xyz")
      return builder.toString
    }, "abc\0defxyz")

    testExpect("StringBuilder 2", () string => {
      var builder = StringBuilder.new
      builder.append("abc")
      builder.append("\0")
      builder.toString # Calling append after toString must still append
      builder.append("def")
      builder.append("")
      builder.append("xyz")
      return builder.toString
    }, "abc\0defxyz")
  }
}
